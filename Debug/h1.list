
h1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006974  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bbc  08006bbc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006bbc  08006bbc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bbc  08006bbc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  20000078  08006c3c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  08006c3c  00021114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e11b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002545  00000000  00000000  0002e1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00030708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000315b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e81  00000000  00000000  00032348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010162  00000000  00000000  0004b1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090593  00000000  00000000  0005b32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb8be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041cc  00000000  00000000  000eb910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a68 	.word	0x08006a68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08006a68 	.word	0x08006a68

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ae:	2afd      	cmp	r2, #253	; 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	; 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	; 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__aeabi_d2uiz>:
 8000a60:	004a      	lsls	r2, r1, #1
 8000a62:	d211      	bcs.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d211      	bcs.n	8000a8e <__aeabi_d2uiz+0x2e>
 8000a6a:	d50d      	bpl.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d40e      	bmi.n	8000a94 <__aeabi_d2uiz+0x34>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_d2uiz+0x3a>
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_frsub>:
 8000b40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	e002      	b.n	8000b4c <__addsf3>
 8000b46:	bf00      	nop

08000b48 <__aeabi_fsub>:
 8000b48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b4c <__addsf3>:
 8000b4c:	0042      	lsls	r2, r0, #1
 8000b4e:	bf1f      	itttt	ne
 8000b50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b54:	ea92 0f03 	teqne	r2, r3
 8000b58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b60:	d06a      	beq.n	8000c38 <__addsf3+0xec>
 8000b62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6a:	bfc1      	itttt	gt
 8000b6c:	18d2      	addgt	r2, r2, r3
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	4048      	eorgt	r0, r1
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	bfb8      	it	lt
 8000b76:	425b      	neglt	r3, r3
 8000b78:	2b19      	cmp	r3, #25
 8000b7a:	bf88      	it	hi
 8000b7c:	4770      	bxhi	lr
 8000b7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4249      	negne	r1, r1
 8000b9e:	ea92 0f03 	teq	r2, r3
 8000ba2:	d03f      	beq.n	8000c24 <__addsf3+0xd8>
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bac:	eb10 000c 	adds.w	r0, r0, ip
 8000bb0:	f1c3 0320 	rsb	r3, r3, #32
 8000bb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bbc:	d502      	bpl.n	8000bc4 <__addsf3+0x78>
 8000bbe:	4249      	negs	r1, r1
 8000bc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc8:	d313      	bcc.n	8000bf2 <__addsf3+0xa6>
 8000bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bce:	d306      	bcc.n	8000bde <__addsf3+0x92>
 8000bd0:	0840      	lsrs	r0, r0, #1
 8000bd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd6:	f102 0201 	add.w	r2, r2, #1
 8000bda:	2afe      	cmp	r2, #254	; 0xfe
 8000bdc:	d251      	bcs.n	8000c82 <__addsf3+0x136>
 8000bde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be6:	bf08      	it	eq
 8000be8:	f020 0001 	biceq.w	r0, r0, #1
 8000bec:	ea40 0003 	orr.w	r0, r0, r3
 8000bf0:	4770      	bx	lr
 8000bf2:	0049      	lsls	r1, r1, #1
 8000bf4:	eb40 0000 	adc.w	r0, r0, r0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	bf28      	it	cs
 8000bfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c00:	d2ed      	bcs.n	8000bde <__addsf3+0x92>
 8000c02:	fab0 fc80 	clz	ip, r0
 8000c06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c12:	bfaa      	itet	ge
 8000c14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c18:	4252      	neglt	r2, r2
 8000c1a:	4318      	orrge	r0, r3
 8000c1c:	bfbc      	itt	lt
 8000c1e:	40d0      	lsrlt	r0, r2
 8000c20:	4318      	orrlt	r0, r3
 8000c22:	4770      	bx	lr
 8000c24:	f092 0f00 	teq	r2, #0
 8000c28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c2c:	bf06      	itte	eq
 8000c2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c32:	3201      	addeq	r2, #1
 8000c34:	3b01      	subne	r3, #1
 8000c36:	e7b5      	b.n	8000ba4 <__addsf3+0x58>
 8000c38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c40:	bf18      	it	ne
 8000c42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c46:	d021      	beq.n	8000c8c <__addsf3+0x140>
 8000c48:	ea92 0f03 	teq	r2, r3
 8000c4c:	d004      	beq.n	8000c58 <__addsf3+0x10c>
 8000c4e:	f092 0f00 	teq	r2, #0
 8000c52:	bf08      	it	eq
 8000c54:	4608      	moveq	r0, r1
 8000c56:	4770      	bx	lr
 8000c58:	ea90 0f01 	teq	r0, r1
 8000c5c:	bf1c      	itt	ne
 8000c5e:	2000      	movne	r0, #0
 8000c60:	4770      	bxne	lr
 8000c62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c66:	d104      	bne.n	8000c72 <__addsf3+0x126>
 8000c68:	0040      	lsls	r0, r0, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c76:	bf3c      	itt	cc
 8000c78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bxcc	lr
 8000c7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8a:	4770      	bx	lr
 8000c8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c90:	bf16      	itet	ne
 8000c92:	4608      	movne	r0, r1
 8000c94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c98:	4601      	movne	r1, r0
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	bf06      	itte	eq
 8000c9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca2:	ea90 0f01 	teqeq	r0, r1
 8000ca6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000caa:	4770      	bx	lr

08000cac <__aeabi_ui2f>:
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e004      	b.n	8000cbc <__aeabi_i2f+0x8>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_i2f>:
 8000cb4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb8:	bf48      	it	mi
 8000cba:	4240      	negmi	r0, r0
 8000cbc:	ea5f 0c00 	movs.w	ip, r0
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc8:	4601      	mov	r1, r0
 8000cca:	f04f 0000 	mov.w	r0, #0
 8000cce:	e01c      	b.n	8000d0a <__aeabi_l2f+0x2a>

08000cd0 <__aeabi_ul2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e00a      	b.n	8000cf4 <__aeabi_l2f+0x14>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_l2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cec:	d502      	bpl.n	8000cf4 <__aeabi_l2f+0x14>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	ea5f 0c01 	movs.w	ip, r1
 8000cf8:	bf02      	ittt	eq
 8000cfa:	4684      	moveq	ip, r0
 8000cfc:	4601      	moveq	r1, r0
 8000cfe:	2000      	moveq	r0, #0
 8000d00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d04:	bf08      	it	eq
 8000d06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0e:	fabc f28c 	clz	r2, ip
 8000d12:	3a08      	subs	r2, #8
 8000d14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d18:	db10      	blt.n	8000d3c <__aeabi_l2f+0x5c>
 8000d1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1e:	4463      	add	r3, ip
 8000d20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	f020 0001 	biceq.w	r0, r0, #1
 8000d3a:	4770      	bx	lr
 8000d3c:	f102 0220 	add.w	r2, r2, #32
 8000d40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_f2uiz>:
 8000d5c:	0042      	lsls	r2, r0, #1
 8000d5e:	d20e      	bcs.n	8000d7e <__aeabi_f2uiz+0x22>
 8000d60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d64:	d30b      	bcc.n	8000d7e <__aeabi_f2uiz+0x22>
 8000d66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d6e:	d409      	bmi.n	8000d84 <__aeabi_f2uiz+0x28>
 8000d70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d78:	fa23 f002 	lsr.w	r0, r3, r2
 8000d7c:	4770      	bx	lr
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	4770      	bx	lr
 8000d84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d88:	d101      	bne.n	8000d8e <__aeabi_f2uiz+0x32>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d102      	bne.n	8000d94 <__aeabi_f2uiz+0x38>
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d92:	4770      	bx	lr
 8000d94:	f04f 0000 	mov.w	r0, #0
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b0b0      	sub	sp, #192	; 0xc0
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000dcc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t ARR_Value = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    DWT_Delay_Init();
 8000dec:	f001 fd3e 	bl	800286c <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	4a87      	ldr	r2, [pc, #540]	; (8001010 <SERVO_Init+0x274>)
 8000df4:	015b      	lsls	r3, r3, #5
 8000df6:	4413      	add	r3, r2
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a86      	ldr	r2, [pc, #536]	; (8001014 <SERVO_Init+0x278>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d10c      	bne.n	8000e1a <SERVO_Init+0x7e>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b85      	ldr	r3, [pc, #532]	; (8001018 <SERVO_Init+0x27c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a84      	ldr	r2, [pc, #528]	; (8001018 <SERVO_Init+0x27c>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b82      	ldr	r3, [pc, #520]	; (8001018 <SERVO_Init+0x27c>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e18:	e052      	b.n	8000ec0 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	4a7c      	ldr	r2, [pc, #496]	; (8001010 <SERVO_Init+0x274>)
 8000e1e:	015b      	lsls	r3, r3, #5
 8000e20:	4413      	add	r3, r2
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a7d      	ldr	r2, [pc, #500]	; (800101c <SERVO_Init+0x280>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10c      	bne.n	8000e44 <SERVO_Init+0xa8>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <SERVO_Init+0x27c>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a7a      	ldr	r2, [pc, #488]	; (8001018 <SERVO_Init+0x27c>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b78      	ldr	r3, [pc, #480]	; (8001018 <SERVO_Init+0x27c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	e03d      	b.n	8000ec0 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	4a72      	ldr	r2, [pc, #456]	; (8001010 <SERVO_Init+0x274>)
 8000e48:	015b      	lsls	r3, r3, #5
 8000e4a:	4413      	add	r3, r2
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a74      	ldr	r2, [pc, #464]	; (8001020 <SERVO_Init+0x284>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d10c      	bne.n	8000e6e <SERVO_Init+0xd2>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b70      	ldr	r3, [pc, #448]	; (8001018 <SERVO_Init+0x27c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a6f      	ldr	r2, [pc, #444]	; (8001018 <SERVO_Init+0x27c>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b6d      	ldr	r3, [pc, #436]	; (8001018 <SERVO_Init+0x27c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	623b      	str	r3, [r7, #32]
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	e028      	b.n	8000ec0 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	4a67      	ldr	r2, [pc, #412]	; (8001010 <SERVO_Init+0x274>)
 8000e72:	015b      	lsls	r3, r3, #5
 8000e74:	4413      	add	r3, r2
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a6a      	ldr	r2, [pc, #424]	; (8001024 <SERVO_Init+0x288>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10c      	bne.n	8000e98 <SERVO_Init+0xfc>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	4b66      	ldr	r3, [pc, #408]	; (8001018 <SERVO_Init+0x27c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a65      	ldr	r2, [pc, #404]	; (8001018 <SERVO_Init+0x27c>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b63      	ldr	r3, [pc, #396]	; (8001018 <SERVO_Init+0x27c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	e013      	b.n	8000ec0 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4a5d      	ldr	r2, [pc, #372]	; (8001010 <SERVO_Init+0x274>)
 8000e9c:	015b      	lsls	r3, r3, #5
 8000e9e:	4413      	add	r3, r2
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a61      	ldr	r2, [pc, #388]	; (8001028 <SERVO_Init+0x28c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d10b      	bne.n	8000ec0 <SERVO_Init+0x124>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <SERVO_Init+0x27c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a5a      	ldr	r2, [pc, #360]	; (8001018 <SERVO_Init+0x27c>)
 8000eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b58      	ldr	r3, [pc, #352]	; (8001018 <SERVO_Init+0x27c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	4a53      	ldr	r2, [pc, #332]	; (8001010 <SERVO_Init+0x274>)
 8000ec4:	015b      	lsls	r3, r3, #5
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3304      	adds	r3, #4
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	4a4c      	ldr	r2, [pc, #304]	; (8001010 <SERVO_Init+0x274>)
 8000ee0:	015b      	lsls	r3, r3, #5
 8000ee2:	4413      	add	r3, r2
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fceb 	bl	80038c8 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4a46      	ldr	r2, [pc, #280]	; (8001010 <SERVO_Init+0x274>)
 8000ef6:	015b      	lsls	r3, r3, #5
 8000ef8:	4413      	add	r3, r2
 8000efa:	3314      	adds	r3, #20
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb22 	bl	8000548 <__aeabi_ui2d>
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	4b48      	ldr	r3, [pc, #288]	; (800102c <SERVO_Init+0x290>)
 8000f0a:	f7ff fcc1 	bl	8000890 <__aeabi_ddiv>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fda3 	bl	8000a60 <__aeabi_d2uiz>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	4a3b      	ldr	r2, [pc, #236]	; (8001010 <SERVO_Init+0x274>)
 8000f24:	015b      	lsls	r3, r3, #5
 8000f26:	4413      	add	r3, r2
 8000f28:	3314      	adds	r3, #20
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fb0b 	bl	8000548 <__aeabi_ui2d>
 8000f32:	4604      	mov	r4, r0
 8000f34:	460d      	mov	r5, r1
 8000f36:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8000f3a:	f7ff fb05 	bl	8000548 <__aeabi_ui2d>
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <SERVO_Init+0x294>)
 8000f44:	f7ff f9c4 	bl	80002d0 <__adddf3>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <SERVO_Init+0x298>)
 8000f56:	f7ff fb71 	bl	800063c <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4629      	mov	r1, r5
 8000f62:	f7ff fc95 	bl	8000890 <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <SERVO_Init+0x294>)
 8000f74:	f7ff f9aa 	bl	80002cc <__aeabi_dsub>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fd6e 	bl	8000a60 <__aeabi_d2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	4a20      	ldr	r2, [pc, #128]	; (8001010 <SERVO_Init+0x274>)
 8000f8e:	015b      	lsls	r3, r3, #5
 8000f90:	4413      	add	r3, r2
 8000f92:	3308      	adds	r3, #8
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a28      	ldr	r2, [pc, #160]	; (8001038 <SERVO_Init+0x29c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d10c      	bne.n	8000fb6 <SERVO_Init+0x21a>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <SERVO_Init+0x27c>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <SERVO_Init+0x27c>)
 8000fa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <SERVO_Init+0x27c>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	e059      	b.n	800106a <SERVO_Init+0x2ce>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4a15      	ldr	r2, [pc, #84]	; (8001010 <SERVO_Init+0x274>)
 8000fba:	015b      	lsls	r3, r3, #5
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc6:	d10c      	bne.n	8000fe2 <SERVO_Init+0x246>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <SERVO_Init+0x27c>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4a12      	ldr	r2, [pc, #72]	; (8001018 <SERVO_Init+0x27c>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	61d3      	str	r3, [r2, #28]
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <SERVO_Init+0x27c>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	e043      	b.n	800106a <SERVO_Init+0x2ce>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SERVO_Init+0x274>)
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	4413      	add	r3, r2
 8000fea:	3308      	adds	r3, #8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <SERVO_Init+0x2a0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d125      	bne.n	8001040 <SERVO_Init+0x2a4>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <SERVO_Init+0x27c>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <SERVO_Init+0x27c>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	61d3      	str	r3, [r2, #28]
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SERVO_Init+0x27c>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	e02d      	b.n	800106a <SERVO_Init+0x2ce>
 800100e:	bf00      	nop
 8001010:	08006af0 	.word	0x08006af0
 8001014:	40010800 	.word	0x40010800
 8001018:	40021000 	.word	0x40021000
 800101c:	40010c00 	.word	0x40010c00
 8001020:	40011000 	.word	0x40011000
 8001024:	40011400 	.word	0x40011400
 8001028:	40011800 	.word	0x40011800
 800102c:	41490000 	.word	0x41490000
 8001030:	3ff00000 	.word	0x3ff00000
 8001034:	40490000 	.word	0x40490000
 8001038:	40012c00 	.word	0x40012c00
 800103c:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <SERVO_Init+0x424>)
 8001044:	015b      	lsls	r3, r3, #5
 8001046:	4413      	add	r3, r2
 8001048:	3308      	adds	r3, #8
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a5d      	ldr	r2, [pc, #372]	; (80011c4 <SERVO_Init+0x428>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10b      	bne.n	800106a <SERVO_Init+0x2ce>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8001052:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <SERVO_Init+0x42c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a5c      	ldr	r2, [pc, #368]	; (80011c8 <SERVO_Init+0x42c>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <SERVO_Init+0x42c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	4a54      	ldr	r2, [pc, #336]	; (80011c0 <SERVO_Init+0x424>)
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	4413      	add	r3, r2
 8001072:	3308      	adds	r3, #8
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.Prescaler = PSC_Value;
 8001078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.Period = ARR_Value;
 8001082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_TIM_Base_Init(&htim);
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fab3 	bl	8004600 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 80010a2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fe01 	bl	8004cb4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 80010b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fb44 	bl	8004744 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 80010c8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f97a 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d8:	2360      	movs	r3, #96	; 0x60
 80010da:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e0:	2300      	movs	r3, #0
 80010e2:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4a34      	ldr	r2, [pc, #208]	; (80011c0 <SERVO_Init+0x424>)
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	4413      	add	r3, r2
 80010f2:	3310      	adds	r3, #16
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fd1a 	bl	8004b38 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8001104:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_ui2d>
 800110c:	4604      	mov	r4, r0
 800110e:	460d      	mov	r5, r1
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <SERVO_Init+0x424>)
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	4413      	add	r3, r2
 8001118:	3318      	adds	r3, #24
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa35 	bl	800058c <__aeabi_f2d>
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <SERVO_Init+0x430>)
 8001128:	f7ff fbb2 	bl	8000890 <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff fa82 	bl	800063c <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	88fc      	ldrh	r4, [r7, #6]
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fc8d 	bl	8000a60 <__aeabi_d2uiz>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <SERVO_Init+0x434>)
 800114c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8001150:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001154:	f7ff f9f8 	bl	8000548 <__aeabi_ui2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <SERVO_Init+0x424>)
 8001160:	015b      	lsls	r3, r3, #5
 8001162:	4413      	add	r3, r2
 8001164:	331c      	adds	r3, #28
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fa0f 	bl	800058c <__aeabi_f2d>
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <SERVO_Init+0x430>)
 8001174:	f7ff fb8c 	bl	8000890 <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff fa5c 	bl	800063c <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	88fc      	ldrh	r4, [r7, #6]
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fc67 	bl	8000a60 <__aeabi_d2uiz>
 8001192:	4603      	mov	r3, r0
 8001194:	b299      	uxth	r1, r3
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <SERVO_Init+0x434>)
 8001198:	00a3      	lsls	r3, r4, #2
 800119a:	4413      	add	r3, r2
 800119c:	460a      	mov	r2, r1
 800119e:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <SERVO_Init+0x424>)
 80011a4:	015b      	lsls	r3, r3, #5
 80011a6:	4413      	add	r3, r2
 80011a8:	3310      	adds	r3, #16
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fb16 	bl	80047e4 <HAL_TIM_PWM_Start>
}
 80011b8:	bf00      	nop
 80011ba:	37c0      	adds	r7, #192	; 0xc0
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	08006af0 	.word	0x08006af0
 80011c4:	40000800 	.word	0x40000800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40340000 	.word	0x40340000
 80011d0:	20000094 	.word	0x20000094

080011d4 <SERVO_RawMove>:
	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void SERVO_RawMove(uint16_t au16_SERVO_Instance, uint16_t au16_Pulse)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	80fb      	strh	r3, [r7, #6]
 80011e0:	4613      	mov	r3, r2
 80011e2:	80bb      	strh	r3, [r7, #4]
	if(au16_Pulse <= gs_SERVO_info[au16_SERVO_Instance].Period_Max && au16_Pulse >= gs_SERVO_info[au16_SERVO_Instance].Period_Min)
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <SERVO_RawMove+0x48>)
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	885b      	ldrh	r3, [r3, #2]
 80011ee:	88ba      	ldrh	r2, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d80e      	bhi.n	8001212 <SERVO_RawMove+0x3e>
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <SERVO_RawMove+0x48>)
 80011f8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80011fc:	88ba      	ldrh	r2, [r7, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d307      	bcc.n	8001212 <SERVO_RawMove+0x3e>
	{
		*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <SERVO_RawMove+0x4c>)
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	4413      	add	r3, r2
 800120a:	330c      	adds	r3, #12
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	88ba      	ldrh	r2, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
	}
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000094 	.word	0x20000094
 8001220:	08006af0 	.word	0x08006af0

08001224 <SERVO_Get_MaxPulse>:

/* Gets The Maximum Pulse Width Value For A Specific Motor */
uint16_t SERVO_Get_MaxPulse(uint16_t au16_SERVO_Instance)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
	return (gs_SERVO_info[au16_SERVO_Instance].Period_Max);
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <SERVO_Get_MaxPulse+0x20>)
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	885b      	ldrh	r3, [r3, #2]
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000094 	.word	0x20000094

08001248 <SERVO_Get_MinPulse>:


/* Gets The Minimum Pulse Width Value For A Specific Motor */
uint16_t SERVO_Get_MinPulse(uint16_t au16_SERVO_Instance)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
	return (gs_SERVO_info[au16_SERVO_Instance].Period_Min);
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <SERVO_Get_MinPulse+0x1c>)
 8001256:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000094 	.word	0x20000094

08001268 <task1>:
//         systicks = 0;
//         flagLight = 1; // đặt biến c�? để báo hiệu cho hàm main
//     }
// }

 void task1(){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

	 Light=200-(value[0]*200)/4096;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <task1+0x4c>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	23c8      	movs	r3, #200	; 0xc8
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	da01      	bge.n	8001280 <task1+0x18>
 800127c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001280:	131b      	asrs	r3, r3, #12
 8001282:	425b      	negs	r3, r3
 8001284:	b29b      	uxth	r3, r3
 8001286:	33c8      	adds	r3, #200	; 0xc8
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <task1+0x50>)
 800128c:	801a      	strh	r2, [r3, #0]
	 sprintf(string, "!1:LIGHT:%d#",Light );
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <task1+0x50>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4909      	ldr	r1, [pc, #36]	; (80012bc <task1+0x54>)
 8001296:	480a      	ldr	r0, [pc, #40]	; (80012c0 <task1+0x58>)
 8001298:	f004 ff6c 	bl	8006174 <siprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 100);
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <task1+0x58>)
 800129e:	f7fe ff55 	bl	800014c <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	4905      	ldr	r1, [pc, #20]	; (80012c0 <task1+0x58>)
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <task1+0x5c>)
 80012ac:	f004 f94b 	bl	8005546 <HAL_UART_Transmit>
 }
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000a8 	.word	0x200000a8
 80012b8:	200000a4 	.word	0x200000a4
 80012bc:	08006a80 	.word	0x08006a80
 80012c0:	200000b4 	.word	0x200000b4
 80012c4:	20000d4c 	.word	0x20000d4c

080012c8 <task2>:
 void task2(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
if  (couter!=precouter){precouter=couter;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <task2+0x48>)
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <task2+0x4c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d016      	beq.n	8001308 <task2+0x40>
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <task2+0x48>)
 80012dc:	781a      	ldrb	r2, [r3, #0]
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <task2+0x4c>)
 80012e0:	701a      	strb	r2, [r3, #0]
	 uint32_t string1[20];
	 sprintf(string1, "!1:couter:%d#",couter );
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <task2+0x48>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	463b      	mov	r3, r7
 80012ea:	490b      	ldr	r1, [pc, #44]	; (8001318 <task2+0x50>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 ff41 	bl	8006174 <siprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)string1, strlen(string1), 100);
 80012f2:	463b      	mov	r3, r7
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ff29 	bl	800014c <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4639      	mov	r1, r7
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <task2+0x54>)
 8001304:	f004 f91f 	bl	8005546 <HAL_UART_Transmit>
  }}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200000c8 	.word	0x200000c8
 8001314:	200000c9 	.word	0x200000c9
 8001318:	08006a90 	.word	0x08006a90
 800131c:	20000d4c 	.word	0x20000d4c

08001320 <resentack>:
void resentack(){
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	; 0x50
 8001324:	af00      	add	r7, sp, #0
	status= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001326:	2108      	movs	r1, #8
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <resentack+0x50>)
 800132a:	f002 fc51 	bl	8003bd0 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <resentack+0x54>)
 8001334:	701a      	strb	r2, [r3, #0]
	if (status_ack != status){
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <resentack+0x58>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <resentack+0x54>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d012      	beq.n	8001368 <resentack+0x48>
		 uint32_t string1[20];
		 sprintf(string1, "!1:button2:%d#",status );
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <resentack+0x54>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	463b      	mov	r3, r7
 800134a:	490c      	ldr	r1, [pc, #48]	; (800137c <resentack+0x5c>)
 800134c:	4618      	mov	r0, r3
 800134e:	f004 ff11 	bl	8006174 <siprintf>
		 HAL_UART_Transmit(&huart1, (uint8_t*)string1, strlen(string1), 1);
 8001352:	463b      	mov	r3, r7
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe fef9 	bl	800014c <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	4639      	mov	r1, r7
 8001360:	2301      	movs	r3, #1
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <resentack+0x60>)
 8001364:	f004 f8ef 	bl	8005546 <HAL_UART_Transmit>
	}
}
 8001368:	bf00      	nop
 800136a:	3750      	adds	r7, #80	; 0x50
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40010800 	.word	0x40010800
 8001374:	200000b1 	.word	0x200000b1
 8001378:	200000b2 	.word	0x200000b2
 800137c:	08006aa0 	.word	0x08006aa0
 8001380:	20000d4c 	.word	0x20000d4c

08001384 <Button>:
    tempp = map(tempp, 0, 4095, 0 ,6);
    verz = Delay[tempp];

}
void Button()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0)
 8001388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138c:	4836      	ldr	r0, [pc, #216]	; (8001468 <Button+0xe4>)
 800138e:	f002 fc1f 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d125      	bne.n	80013e4 <Button+0x60>
  {
	  HAL_Delay(20);
 8001398:	2014      	movs	r0, #20
 800139a:	f001 faf9 	bl	8002990 <HAL_Delay>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) // taster losgelassen
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4831      	ldr	r0, [pc, #196]	; (8001468 <Button+0xe4>)
 80013a4:	f002 fc14 	bl	8003bd0 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d11a      	bne.n	80013e4 <Button+0x60>
    {
      if (Taster == 0)
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <Button+0xe8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d108      	bne.n	80013c8 <Button+0x44>
      {
        Taster = 1;
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <Button+0xe8>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
        previousMillis3 = currentMillis;
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <Button+0xec>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <Button+0xf0>)
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e00d      	b.n	80013e4 <Button+0x60>
        //Serial.print("Status Record "); Serial.println(Taster);
      }
      else if ((Taster == 1) && (currentMillis - previousMillis3 < 250))
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <Button+0xe8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d109      	bne.n	80013e4 <Button+0x60>
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <Button+0xec>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <Button+0xf0>)
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	2bf9      	cmp	r3, #249	; 0xf9
 80013dc:	d802      	bhi.n	80013e4 <Button+0x60>
      {
        Taster = 2;
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <Button+0xe8>)
 80013e0:	2202      	movs	r2, #2
 80013e2:	601a      	str	r2, [r3, #0]
        Serial.println(Taster);
      }*/
    }
  }

    if ((Taster == 1) && (currentMillis - previousMillis3 > 1000)) // array beschreiben
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <Button+0xe8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d11c      	bne.n	8001426 <Button+0xa2>
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <Button+0xec>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <Button+0xf0>)
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fa:	d914      	bls.n	8001426 <Button+0xa2>
    {
      arrayStep += 1;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <Button+0xf4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <Button+0xf4>)
 8001404:	6013      	str	r3, [r2, #0]
      arrayMax = arrayStep;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <Button+0xf4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <Button+0xf8>)
 800140c:	6013      	str	r3, [r2, #0]
      record();
 800140e:	f000 f83b 	bl	8001488 <record>
      Taster = 0;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <Button+0xe8>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
      playmode = 0;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <Button+0xfc>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]


      HAL_Delay(100);
 800141e:	2064      	movs	r0, #100	; 0x64
 8001420:	f001 fab6 	bl	8002990 <HAL_Delay>
    {
 8001424:	e012      	b.n	800144c <Button+0xc8>

    }
    else if (Taster == 2)
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <Button+0xe8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d10e      	bne.n	800144c <Button+0xc8>
    {
      arrayStep = 0;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <Button+0xf4>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
      playmode = 1;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <Button+0xfc>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
      Taster = 0;
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <Button+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
      Step = 1;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <Button+0x100>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]


      HAL_Delay(250);
 8001446:	20fa      	movs	r0, #250	; 0xfa
 8001448:	f001 faa2 	bl	8002990 <HAL_Delay>
      // ++ arrayStep
      // playmode = 1;
      Taster = 0;
      Serial.println("Clear ");
    }*/
    if (currentMillis - previousMillis3 > 2000) // Taster Status löschen
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <Button+0xec>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <Button+0xf0>)
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800145a:	d902      	bls.n	8001462 <Button+0xde>
    {
      Taster = 0;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <Button+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
      //Serial.println("restart ");
    }
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40011000 	.word	0x40011000
 800146c:	200000e8 	.word	0x200000e8
 8001470:	200000d4 	.word	0x200000d4
 8001474:	200000cc 	.word	0x200000cc
 8001478:	200000dc 	.word	0x200000dc
 800147c:	200000e0 	.word	0x200000e0
 8001480:	20000c64 	.word	0x20000c64
 8001484:	20000c65 	.word	0x20000c65

08001488 <record>:
void record()
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
    joint0[arrayStep] = Servo_Pulse[0];
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <record+0x4c>)
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <record+0x50>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4611      	mov	r1, r2
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <record+0x54>)
 8001498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    joint1[arrayStep] = Servo_Pulse[1];
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <record+0x4c>)
 800149e:	885a      	ldrh	r2, [r3, #2]
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <record+0x50>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4611      	mov	r1, r2
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <record+0x58>)
 80014a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    joint2[arrayStep] = Servo_Pulse[2];
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <record+0x4c>)
 80014ae:	889a      	ldrh	r2, [r3, #4]
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <record+0x50>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <record+0x5c>)
 80014b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    joint3[arrayStep] = Servo_Pulse[3];
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <record+0x4c>)
 80014be:	88da      	ldrh	r2, [r3, #6]
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <record+0x50>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <record+0x60>)
 80014c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000c88 	.word	0x20000c88
 80014d8:	200000dc 	.word	0x200000dc
 80014dc:	20000124 	.word	0x20000124
 80014e0:	200003f4 	.word	0x200003f4
 80014e4:	200006c4 	.word	0x200006c4
 80014e8:	20000994 	.word	0x20000994

080014ec <play_servo>:
void play_servo()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    steps += 1;
 80014f0:	4b5a      	ldr	r3, [pc, #360]	; (800165c <play_servo+0x170>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a59      	ldr	r2, [pc, #356]	; (800165c <play_servo+0x170>)
 80014f8:	6013      	str	r3, [r2, #0]
    if (steps < stepsMax)
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <play_servo+0x170>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <play_servo+0x174>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	f280 80a2 	bge.w	800164c <play_servo+0x160>
    {
      //time = del*5;// anfahr rampe
      if(steps == 20) time = del*3;          // anfahr rampe up
 8001508:	4b54      	ldr	r3, [pc, #336]	; (800165c <play_servo+0x170>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b14      	cmp	r3, #20
 800150e:	d107      	bne.n	8001520 <play_servo+0x34>
 8001510:	4b54      	ldr	r3, [pc, #336]	; (8001664 <play_servo+0x178>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	4a53      	ldr	r2, [pc, #332]	; (8001668 <play_servo+0x17c>)
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e01d      	b.n	800155c <play_servo+0x70>
      else if(steps == 40) time = del*3;
 8001520:	4b4e      	ldr	r3, [pc, #312]	; (800165c <play_servo+0x170>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b28      	cmp	r3, #40	; 0x28
 8001526:	d107      	bne.n	8001538 <play_servo+0x4c>
 8001528:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <play_servo+0x178>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	4a4d      	ldr	r2, [pc, #308]	; (8001668 <play_servo+0x17c>)
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e011      	b.n	800155c <play_servo+0x70>
      else if(steps == 80) time = del*2;
 8001538:	4b48      	ldr	r3, [pc, #288]	; (800165c <play_servo+0x170>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b50      	cmp	r3, #80	; 0x50
 800153e:	d105      	bne.n	800154c <play_servo+0x60>
 8001540:	4b48      	ldr	r3, [pc, #288]	; (8001664 <play_servo+0x178>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4a48      	ldr	r2, [pc, #288]	; (8001668 <play_servo+0x17c>)
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e007      	b.n	800155c <play_servo+0x70>
      else if(steps == 100) time = del;
 800154c:	4b43      	ldr	r3, [pc, #268]	; (800165c <play_servo+0x170>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b64      	cmp	r3, #100	; 0x64
 8001552:	d103      	bne.n	800155c <play_servo+0x70>
 8001554:	4b43      	ldr	r3, [pc, #268]	; (8001664 <play_servo+0x178>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a43      	ldr	r2, [pc, #268]	; (8001668 <play_servo+0x17c>)
 800155a:	6013      	str	r3, [r2, #0]
      if(steps == stepsMax-200) time = del*2;        // stop rampe down
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <play_servo+0x174>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <play_servo+0x170>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d105      	bne.n	8001578 <play_servo+0x8c>
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <play_servo+0x178>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4a3d      	ldr	r2, [pc, #244]	; (8001668 <play_servo+0x17c>)
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e02c      	b.n	80015d2 <play_servo+0xe6>
      else if(steps == stepsMax-80) time = del*2;
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <play_servo+0x174>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <play_servo+0x170>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d105      	bne.n	8001594 <play_servo+0xa8>
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <play_servo+0x178>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4a36      	ldr	r2, [pc, #216]	; (8001668 <play_servo+0x17c>)
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01e      	b.n	80015d2 <play_servo+0xe6>
      else if(steps == stepsMax-40) time = del*3;
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <play_servo+0x174>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <play_servo+0x170>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d107      	bne.n	80015b4 <play_servo+0xc8>
 80015a4:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <play_servo+0x178>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <play_servo+0x17c>)
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00e      	b.n	80015d2 <play_servo+0xe6>
      else if(steps == stepsMax-20) time = del*3;
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <play_servo+0x174>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1a3 0214 	sub.w	r2, r3, #20
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <play_servo+0x170>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d106      	bne.n	80015d2 <play_servo+0xe6>
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <play_servo+0x178>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <play_servo+0x17c>)
 80015d0:	6013      	str	r3, [r2, #0]

      Servo_Pulse[0] += dir[0]; // set new pos
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <play_servo+0x180>)
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <play_servo+0x184>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <play_servo+0x180>)
 80015e2:	801a      	strh	r2, [r3, #0]
      Servo_Pulse[1] += dir[1];
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <play_servo+0x180>)
 80015e6:	885a      	ldrh	r2, [r3, #2]
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <play_servo+0x184>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <play_servo+0x180>)
 80015f4:	805a      	strh	r2, [r3, #2]
      Servo_Pulse[2] += dir[2];
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <play_servo+0x180>)
 80015f8:	889a      	ldrh	r2, [r3, #4]
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <play_servo+0x184>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b29a      	uxth	r2, r3
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <play_servo+0x180>)
 8001606:	809a      	strh	r2, [r3, #4]
      Servo_Pulse[3] += dir[3];
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <play_servo+0x180>)
 800160a:	88da      	ldrh	r2, [r3, #6]
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <play_servo+0x184>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4413      	add	r3, r2
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <play_servo+0x180>)
 8001618:	80da      	strh	r2, [r3, #6]

      SERVO_RawMove(SERVO_Motor1, Servo_Pulse[0]); // Zange //anschlüsse gemappt!
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <play_servo+0x180>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fdd7 	bl	80011d4 <SERVO_RawMove>
      SERVO_RawMove(SERVO_Motor2, Servo_Pulse[1]); // Hand
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <play_servo+0x180>)
 8001628:	885b      	ldrh	r3, [r3, #2]
 800162a:	4619      	mov	r1, r3
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fdd1 	bl	80011d4 <SERVO_RawMove>
      SERVO_RawMove(SERVO_Motor3, Servo_Pulse[2]); // Schulter
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <play_servo+0x180>)
 8001634:	889b      	ldrh	r3, [r3, #4]
 8001636:	4619      	mov	r1, r3
 8001638:	2002      	movs	r0, #2
 800163a:	f7ff fdcb 	bl	80011d4 <SERVO_RawMove>
      SERVO_RawMove(SERVO_Motor4, Servo_Pulse[3]); // Ellbogen
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <play_servo+0x180>)
 8001640:	88db      	ldrh	r3, [r3, #6]
 8001642:	4619      	mov	r1, r3
 8001644:	2003      	movs	r0, #3
 8001646:	f7ff fdc5 	bl	80011d4 <SERVO_RawMove>
    else
    {
      Step = 1; // next step aus array lesen
      steps = 0; // servo zwischenschritte
    }
}
 800164a:	e005      	b.n	8001658 <play_servo+0x16c>
      Step = 1; // next step aus array lesen
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <play_servo+0x188>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
      steps = 0; // servo zwischenschritte
 8001652:	4b02      	ldr	r3, [pc, #8]	; (800165c <play_servo+0x170>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200000f0 	.word	0x200000f0
 8001660:	200000ec 	.word	0x200000ec
 8001664:	20000004 	.word	0x20000004
 8001668:	20000000 	.word	0x20000000
 800166c:	20000c88 	.word	0x20000c88
 8001670:	20000114 	.word	0x20000114
 8001674:	20000c65 	.word	0x20000c65

08001678 <myabs>:
int myabs(int num){
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if (num < 0) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	da02      	bge.n	800168c <myabs+0x14>
	    return -num;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	425b      	negs	r3, r3
 800168a:	e000      	b.n	800168e <myabs+0x16>
	  } else {
	    return num;
 800168c:	687b      	ldr	r3, [r7, #4]
	  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <calculate>:
void calculate()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
      // wegstrecken berechnen
      dif[0] = myabs(Servo_Pulse[0]-sol[0]);
 800169c:	4b61      	ldr	r3, [pc, #388]	; (8001824 <calculate+0x18c>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b61      	ldr	r3, [pc, #388]	; (8001828 <calculate+0x190>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ffe5 	bl	8001678 <myabs>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a5e      	ldr	r2, [pc, #376]	; (800182c <calculate+0x194>)
 80016b2:	6013      	str	r3, [r2, #0]
      dif[1] = myabs(Servo_Pulse[1]-sol[1]);
 80016b4:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <calculate+0x18c>)
 80016b6:	885b      	ldrh	r3, [r3, #2]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b5b      	ldr	r3, [pc, #364]	; (8001828 <calculate+0x190>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ffd9 	bl	8001678 <myabs>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <calculate+0x194>)
 80016ca:	6053      	str	r3, [r2, #4]
      dif[2] = myabs(Servo_Pulse[2]-sol[2]);
 80016cc:	4b55      	ldr	r3, [pc, #340]	; (8001824 <calculate+0x18c>)
 80016ce:	889b      	ldrh	r3, [r3, #4]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b55      	ldr	r3, [pc, #340]	; (8001828 <calculate+0x190>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ffcd 	bl	8001678 <myabs>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <calculate+0x194>)
 80016e2:	6093      	str	r3, [r2, #8]
      dif[3] = myabs(Servo_Pulse[3]-sol[3]);
 80016e4:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <calculate+0x18c>)
 80016e6:	88db      	ldrh	r3, [r3, #6]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <calculate+0x190>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ffc1 	bl	8001678 <myabs>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <calculate+0x194>)
 80016fa:	60d3      	str	r3, [r2, #12]

      // grösten weg finden
      stepsMax = max(dif[0],dif[1]);
 80016fc:	4b4b      	ldr	r3, [pc, #300]	; (800182c <calculate+0x194>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a4a      	ldr	r2, [pc, #296]	; (800182c <calculate+0x194>)
 8001702:	6852      	ldr	r2, [r2, #4]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f898 	bl	800183c <max>
 800170c:	4603      	mov	r3, r0
 800170e:	4a48      	ldr	r2, [pc, #288]	; (8001830 <calculate+0x198>)
 8001710:	6013      	str	r3, [r2, #0]
      stepsMax = max(stepsMax,dif[2]);
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <calculate+0x198>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a45      	ldr	r2, [pc, #276]	; (800182c <calculate+0x194>)
 8001718:	6892      	ldr	r2, [r2, #8]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f88d 	bl	800183c <max>
 8001722:	4603      	mov	r3, r0
 8001724:	4a42      	ldr	r2, [pc, #264]	; (8001830 <calculate+0x198>)
 8001726:	6013      	str	r3, [r2, #0]
      stepsMax = max(stepsMax,dif[3]);
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <calculate+0x198>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3f      	ldr	r2, [pc, #252]	; (800182c <calculate+0x194>)
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f882 	bl	800183c <max>
 8001738:	4603      	mov	r3, r0
 800173a:	4a3d      	ldr	r2, [pc, #244]	; (8001830 <calculate+0x198>)
 800173c:	6013      	str	r3, [r2, #0]
      stepsMax=800;
 800173e:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <calculate+0x198>)
 8001740:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001744:	601a      	str	r2, [r3, #0]
      //Serial.println(stepsMax);

      if (stepsMax < 500) // slow if maxstep < 400
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <calculate+0x198>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800174e:	da03      	bge.n	8001758 <calculate+0xc0>
        del = 1;
 8001750:	4b38      	ldr	r3, [pc, #224]	; (8001834 <calculate+0x19c>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e002      	b.n	800175e <calculate+0xc6>
      else
        del = 1;
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <calculate+0x19c>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

       // einzelschritt berechnen (step + pos/neg)
      if (sol[0] < Servo_Pulse[0]) dir[0] = 0-dif[0]/stepsMax; else dir[0] = dif[0]/stepsMax;
 800175e:	4b32      	ldr	r3, [pc, #200]	; (8001828 <calculate+0x190>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a30      	ldr	r2, [pc, #192]	; (8001824 <calculate+0x18c>)
 8001764:	8812      	ldrh	r2, [r2, #0]
 8001766:	4293      	cmp	r3, r2
 8001768:	da09      	bge.n	800177e <calculate+0xe6>
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <calculate+0x194>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <calculate+0x198>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fb92 f3f3 	sdiv	r3, r2, r3
 8001776:	425b      	negs	r3, r3
 8001778:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <calculate+0x1a0>)
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e007      	b.n	800178e <calculate+0xf6>
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <calculate+0x194>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <calculate+0x198>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fb92 f3f3 	sdiv	r3, r2, r3
 800178a:	4a2b      	ldr	r2, [pc, #172]	; (8001838 <calculate+0x1a0>)
 800178c:	6013      	str	r3, [r2, #0]
      if (sol[1] < Servo_Pulse[1]) dir[1] = 0-dif[1]/stepsMax; else dir[1] = dif[1]/stepsMax;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <calculate+0x190>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <calculate+0x18c>)
 8001794:	8852      	ldrh	r2, [r2, #2]
 8001796:	4293      	cmp	r3, r2
 8001798:	da09      	bge.n	80017ae <calculate+0x116>
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <calculate+0x194>)
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <calculate+0x198>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017a6:	425b      	negs	r3, r3
 80017a8:	4a23      	ldr	r2, [pc, #140]	; (8001838 <calculate+0x1a0>)
 80017aa:	6053      	str	r3, [r2, #4]
 80017ac:	e007      	b.n	80017be <calculate+0x126>
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <calculate+0x194>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <calculate+0x198>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <calculate+0x1a0>)
 80017bc:	6053      	str	r3, [r2, #4]
      if (sol[2] < Servo_Pulse[2]) dir[2] = 0-dif[2]/stepsMax; else dir[2] = dif[2]/stepsMax;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <calculate+0x190>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <calculate+0x18c>)
 80017c4:	8892      	ldrh	r2, [r2, #4]
 80017c6:	4293      	cmp	r3, r2
 80017c8:	da09      	bge.n	80017de <calculate+0x146>
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <calculate+0x194>)
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <calculate+0x198>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d6:	425b      	negs	r3, r3
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <calculate+0x1a0>)
 80017da:	6093      	str	r3, [r2, #8]
 80017dc:	e007      	b.n	80017ee <calculate+0x156>
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <calculate+0x194>)
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <calculate+0x198>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <calculate+0x1a0>)
 80017ec:	6093      	str	r3, [r2, #8]
      if (sol[3] < Servo_Pulse[3]) dir[3] = 0-dif[3]/stepsMax; else dir[3] = dif[3]/stepsMax;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <calculate+0x190>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <calculate+0x18c>)
 80017f4:	88d2      	ldrh	r2, [r2, #6]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	da09      	bge.n	800180e <calculate+0x176>
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <calculate+0x194>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <calculate+0x198>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fb92 f3f3 	sdiv	r3, r2, r3
 8001806:	425b      	negs	r3, r3
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <calculate+0x1a0>)
 800180a:	60d3      	str	r3, [r2, #12]
        //Serial.println(dir4);

}
 800180c:	e007      	b.n	800181e <calculate+0x186>
      if (sol[3] < Servo_Pulse[3]) dir[3] = 0-dif[3]/stepsMax; else dir[3] = dif[3]/stepsMax;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <calculate+0x194>)
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <calculate+0x198>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fb92 f3f3 	sdiv	r3, r2, r3
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <calculate+0x1a0>)
 800181c:	60d3      	str	r3, [r2, #12]
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000c88 	.word	0x20000c88
 8001828:	20000104 	.word	0x20000104
 800182c:	200000f4 	.word	0x200000f4
 8001830:	200000ec 	.word	0x200000ec
 8001834:	20000004 	.word	0x20000004
 8001838:	20000114 	.word	0x20000114

0800183c <max>:
int map(int x, int in_min, int in_max, int out_min, int out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
int max(int a, int b) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
	if (a>b){
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	dd01      	ble.n	8001852 <max+0x16>
	return a;}
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	e000      	b.n	8001854 <max+0x18>
	else {
		return b;
 8001852:	683b      	ldr	r3, [r7, #0]
	}
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
	...

08001860 <Read>:
void Read()
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
    sol[0] = joint0[arrayStep];
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <Read+0x44>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <Read+0x48>)
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <Read+0x4c>)
 8001870:	6013      	str	r3, [r2, #0]
    sol[1] = joint1[arrayStep];
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <Read+0x44>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <Read+0x50>)
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <Read+0x4c>)
 800187e:	6053      	str	r3, [r2, #4]
    sol[2] = joint2[arrayStep];
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <Read+0x44>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <Read+0x54>)
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <Read+0x4c>)
 800188c:	6093      	str	r3, [r2, #8]
    sol[3] = joint3[arrayStep];
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <Read+0x44>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <Read+0x58>)
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <Read+0x4c>)
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	200000dc 	.word	0x200000dc
 80018a8:	20000124 	.word	0x20000124
 80018ac:	20000104 	.word	0x20000104
 80018b0:	200003f4 	.word	0x200003f4
 80018b4:	200006c4 	.word	0x200006c4
 80018b8:	20000994 	.word	0x20000994

080018bc <play>:
void play(){
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	if(!playmode) // manualy modus
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <play+0x98>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <play+0x12>
	  {
		control_servo();
 80018c8:	f000 f856 	bl	8001978 <control_servo>
		        play_servo();
		      }
		     }
	 }
	 }
}
 80018cc:	e040      	b.n	8001950 <play+0x94>
	 else if(playmode){
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <play+0x98>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03c      	beq.n	8001950 <play+0x94>
		 if(status_servo) {
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <play+0x9c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d038      	beq.n	8001950 <play+0x94>
		 if (Step) // next step read from array
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <play+0xa0>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d02d      	beq.n	8001942 <play+0x86>
		     {if (arrayStep < arrayMax) // we not reach the end from stored data
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <play+0xa4>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <play+0xa8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	da0c      	bge.n	800190c <play+0x50>
		        arrayStep += 1; // next array pos
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <play+0xa4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <play+0xa4>)
 80018fa:	6013      	str	r3, [r2, #0]
		      Read(); // from the arrays
 80018fc:	f7ff ffb0 	bl	8001860 <Read>
		     calculate(); // find biggest travel distance and calculate the other 3 servos (the have to do smaler steps to be finished at same time!)
 8001900:	f7ff feca 	bl	8001698 <calculate>
		        Step = 0;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <play+0xa0>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
}
 800190a:	e021      	b.n	8001950 <play+0x94>
		           {     status_servo=0;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <play+0x9c>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
		           	   	   couter++;
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <play+0xac>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <play+0xac>)
 800191c:	701a      	strb	r2, [r3, #0]
						 arrayStep = 0; //
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <play+0xa4>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
						 countverz = 0; // used for the delay
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <play+0xb0>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
						 while(countverz < 300) // verz = time getting from calc_pause();
 800192a:	e004      	b.n	8001936 <play+0x7a>
						   countverz += 1;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <play+0xb0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <play+0xb0>)
 8001934:	6013      	str	r3, [r2, #0]
						 while(countverz < 300) // verz = time getting from calc_pause();
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <play+0xb0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800193e:	dbf5      	blt.n	800192c <play+0x70>
}
 8001940:	e006      	b.n	8001950 <play+0x94>
		        previousMicros = currentMicros;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <play+0xb4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <play+0xb8>)
 800194a:	601a      	str	r2, [r3, #0]
		        play_servo();
 800194c:	f7ff fdce 	bl	80014ec <play_servo>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000c64 	.word	0x20000c64
 8001958:	200000b3 	.word	0x200000b3
 800195c:	20000c65 	.word	0x20000c65
 8001960:	200000dc 	.word	0x200000dc
 8001964:	200000e0 	.word	0x200000e0
 8001968:	200000c8 	.word	0x200000c8
 800196c:	200000e4 	.word	0x200000e4
 8001970:	200000d8 	.word	0x200000d8
 8001974:	200000d0 	.word	0x200000d0

08001978 <control_servo>:

void control_servo(){
 8001978:	b598      	push	{r3, r4, r7, lr}
 800197a:	af00      	add	r7, sp, #0
//	SERVO_MoveTo(SERVO_Motor4, i);
//	 HAL_Delay(100);
//}


	Servo_Pulse[0] = ((4095-value[0])*temp[0]) + Min_Pulse[0];
 800197c:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <control_servo+0x120>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001984:	330f      	adds	r3, #15
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f994 	bl	8000cb4 <__aeabi_i2f>
 800198c:	4602      	mov	r2, r0
 800198e:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <control_servo+0x124>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f7fe fbe1 	bl	800015c <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	461c      	mov	r4, r3
 800199e:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <control_servo+0x128>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f986 	bl	8000cb4 <__aeabi_i2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff f8cd 	bl	8000b4c <__addsf3>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f9d1 	bl	8000d5c <__aeabi_f2uiz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <control_servo+0x12c>)
 80019c0:	801a      	strh	r2, [r3, #0]
	SERVO_RawMove(SERVO_Motor1, Servo_Pulse[0]);
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <control_servo+0x12c>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fc03 	bl	80011d4 <SERVO_RawMove>


	Servo_Pulse[1] = (uint16_t)((4095-value[1])*temp[1]) + Min_Pulse[1];
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <control_servo+0x120>)
 80019d0:	885b      	ldrh	r3, [r3, #2]
 80019d2:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80019d6:	330f      	adds	r3, #15
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff f96b 	bl	8000cb4 <__aeabi_i2f>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <control_servo+0x124>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f7fe fbb8 	bl	800015c <__aeabi_fmul>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9b4 	bl	8000d5c <__aeabi_f2uiz>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <control_servo+0x128>)
 80019fa:	885b      	ldrh	r3, [r3, #2]
 80019fc:	4413      	add	r3, r2
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <control_servo+0x12c>)
 8001a02:	805a      	strh	r2, [r3, #2]
	SERVO_RawMove(SERVO_Motor2, Servo_Pulse[1]);
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <control_servo+0x12c>)
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff fbe2 	bl	80011d4 <SERVO_RawMove>

	Servo_Pulse[2] = (uint16_t)((4095-value[2])*temp[2]) + Min_Pulse[2];
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <control_servo+0x120>)
 8001a12:	889b      	ldrh	r3, [r3, #4]
 8001a14:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001a18:	330f      	adds	r3, #15
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f94a 	bl	8000cb4 <__aeabi_i2f>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <control_servo+0x124>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f7fe fb97 	bl	800015c <__aeabi_fmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f993 	bl	8000d5c <__aeabi_f2uiz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <control_servo+0x128>)
 8001a3c:	889b      	ldrh	r3, [r3, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <control_servo+0x12c>)
 8001a44:	809a      	strh	r2, [r3, #4]
	SERVO_RawMove(SERVO_Motor3, Servo_Pulse[2]);
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <control_servo+0x12c>)
 8001a48:	889b      	ldrh	r3, [r3, #4]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7ff fbc1 	bl	80011d4 <SERVO_RawMove>

	Servo_Pulse[3] = (uint16_t)((4095-value[3])*temp[3]) + Min_Pulse[3];
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <control_servo+0x120>)
 8001a54:	88db      	ldrh	r3, [r3, #6]
 8001a56:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001a5a:	330f      	adds	r3, #15
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f929 	bl	8000cb4 <__aeabi_i2f>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <control_servo+0x124>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7fe fb76 	bl	800015c <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f972 	bl	8000d5c <__aeabi_f2uiz>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <control_servo+0x128>)
 8001a7e:	88db      	ldrh	r3, [r3, #6]
 8001a80:	4413      	add	r3, r2
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <control_servo+0x12c>)
 8001a86:	80da      	strh	r2, [r3, #6]
	SERVO_RawMove(SERVO_Motor4, Servo_Pulse[3]);
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <control_servo+0x12c>)
 8001a8a:	88db      	ldrh	r3, [r3, #6]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2003      	movs	r0, #3
 8001a90:	f7ff fba0 	bl	80011d4 <SERVO_RawMove>

}
 8001a94:	bf00      	nop
 8001a96:	bd98      	pop	{r3, r4, r7, pc}
 8001a98:	200000a8 	.word	0x200000a8
 8001a9c:	20000c78 	.word	0x20000c78
 8001aa0:	20000c68 	.word	0x20000c68
 8001aa4:	20000c88 	.word	0x20000c88

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aac:	f000 ff0e 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab0:	f000 f8f6 	bl	8001ca0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SERVO_Init(SERVO_Motor1);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff f971 	bl	8000d9c <SERVO_Init>
  SERVO_Init(SERVO_Motor2);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f7ff f96e 	bl	8000d9c <SERVO_Init>
  SERVO_Init(SERVO_Motor3);
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f7ff f96b 	bl	8000d9c <SERVO_Init>
  SERVO_Init(SERVO_Motor4);
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	f7ff f968 	bl	8000d9c <SERVO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001acc:	f000 fa50 	bl	8001f70 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad0:	f000 fa28 	bl	8001f24 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ad4:	f000 f9fc 	bl	8001ed0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ad8:	f000 f93e 	bl	8001d58 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001adc:	f000 f9ac 	bl	8001e38 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start_DMA(&hadc1, &var, 1);
  HAL_ADC_Start_DMA(&hadc1, value, 4);
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4961      	ldr	r1, [pc, #388]	; (8001c68 <main+0x1c0>)
 8001ae4:	4861      	ldr	r0, [pc, #388]	; (8001c6c <main+0x1c4>)
 8001ae6:	f001 f84f 	bl	8002b88 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_DMA(&huart1, &rx, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	4960      	ldr	r1, [pc, #384]	; (8001c70 <main+0x1c8>)
 8001aee:	4861      	ldr	r0, [pc, #388]	; (8001c74 <main+0x1cc>)
 8001af0:	f003 fdbb 	bl	800566a <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001af4:	4860      	ldr	r0, [pc, #384]	; (8001c78 <main+0x1d0>)
 8001af6:	f002 fdd3 	bl	80046a0 <HAL_TIM_Base_Start_IT>

  Min_Pulse[0] = SERVO_Get_MinPulse(SERVO_Motor1);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fba4 	bl	8001248 <SERVO_Get_MinPulse>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b5d      	ldr	r3, [pc, #372]	; (8001c7c <main+0x1d4>)
 8001b06:	801a      	strh	r2, [r3, #0]
  Max_Pulse[0] = SERVO_Get_MaxPulse(SERVO_Motor1);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fb8b 	bl	8001224 <SERVO_Get_MaxPulse>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b5b      	ldr	r3, [pc, #364]	; (8001c80 <main+0x1d8>)
 8001b14:	801a      	strh	r2, [r3, #0]
  temp[0] = ((Max_Pulse[0]-Min_Pulse[0])/4096.0);
 8001b16:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <main+0x1d8>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <main+0x1d4>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd20 	bl	8000568 <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <main+0x1dc>)
 8001b2e:	f7fe feaf 	bl	8000890 <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe ffb1 	bl	8000aa0 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a51      	ldr	r2, [pc, #324]	; (8001c88 <main+0x1e0>)
 8001b42:	6013      	str	r3, [r2, #0]

  Min_Pulse[1] = SERVO_Get_MinPulse(SERVO_Motor2);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7ff fb7f 	bl	8001248 <SERVO_Get_MinPulse>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <main+0x1d4>)
 8001b50:	805a      	strh	r2, [r3, #2]
  Max_Pulse[1] = SERVO_Get_MaxPulse(SERVO_Motor2);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff fb66 	bl	8001224 <SERVO_Get_MaxPulse>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b48      	ldr	r3, [pc, #288]	; (8001c80 <main+0x1d8>)
 8001b5e:	805a      	strh	r2, [r3, #2]
  temp[1] = ((Max_Pulse[1]-Min_Pulse[1])/4096.0);
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <main+0x1d8>)
 8001b62:	885b      	ldrh	r3, [r3, #2]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <main+0x1d4>)
 8001b68:	885b      	ldrh	r3, [r3, #2]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcfb 	bl	8000568 <__aeabi_i2d>
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <main+0x1dc>)
 8001b78:	f7fe fe8a 	bl	8000890 <__aeabi_ddiv>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7fe ff8c 	bl	8000aa0 <__aeabi_d2f>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a3f      	ldr	r2, [pc, #252]	; (8001c88 <main+0x1e0>)
 8001b8c:	6053      	str	r3, [r2, #4]

  Min_Pulse[2] = SERVO_Get_MinPulse(SERVO_Motor3);
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f7ff fb5a 	bl	8001248 <SERVO_Get_MinPulse>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <main+0x1d4>)
 8001b9a:	809a      	strh	r2, [r3, #4]
  Max_Pulse[2] = SERVO_Get_MaxPulse(SERVO_Motor3);
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7ff fb41 	bl	8001224 <SERVO_Get_MaxPulse>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <main+0x1d8>)
 8001ba8:	809a      	strh	r2, [r3, #4]
  temp[2] = ((Max_Pulse[2]-Min_Pulse[2])/4096.0);
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <main+0x1d8>)
 8001bac:	889b      	ldrh	r3, [r3, #4]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <main+0x1d4>)
 8001bb2:	889b      	ldrh	r3, [r3, #4]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fcd6 	bl	8000568 <__aeabi_i2d>
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <main+0x1dc>)
 8001bc2:	f7fe fe65 	bl	8000890 <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe ff67 	bl	8000aa0 <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <main+0x1e0>)
 8001bd6:	6093      	str	r3, [r2, #8]

  Min_Pulse[3] = SERVO_Get_MinPulse(SERVO_Motor4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f7ff fb35 	bl	8001248 <SERVO_Get_MinPulse>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <main+0x1d4>)
 8001be4:	80da      	strh	r2, [r3, #6]
  Max_Pulse[3] = SERVO_Get_MaxPulse(SERVO_Motor4);
 8001be6:	2003      	movs	r0, #3
 8001be8:	f7ff fb1c 	bl	8001224 <SERVO_Get_MaxPulse>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <main+0x1d8>)
 8001bf2:	80da      	strh	r2, [r3, #6]
  temp[3] = ((Max_Pulse[3]-Min_Pulse[3])/4096.0);
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <main+0x1d8>)
 8001bf6:	88db      	ldrh	r3, [r3, #6]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <main+0x1d4>)
 8001bfc:	88db      	ldrh	r3, [r3, #6]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcb1 	bl	8000568 <__aeabi_i2d>
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <main+0x1dc>)
 8001c0c:	f7fe fe40 	bl	8000890 <__aeabi_ddiv>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ff42 	bl	8000aa0 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <main+0x1e0>)
 8001c20:	60d3      	str	r3, [r2, #12]

  SCH_Add_Task(task1, 1000, 12000);
 8001c22:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001c26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c2a:	4818      	ldr	r0, [pc, #96]	; (8001c8c <main+0x1e4>)
 8001c2c:	f000 fb12 	bl	8002254 <SCH_Add_Task>
  SCH_Add_Task(task2, 1000, 500);
 8001c30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c38:	4815      	ldr	r0, [pc, #84]	; (8001c90 <main+0x1e8>)
 8001c3a:	f000 fb0b 	bl	8002254 <SCH_Add_Task>
  SCH_Add_Task(resentack, 6000, 3300);
 8001c3e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001c42:	f241 7170 	movw	r1, #6000	; 0x1770
 8001c46:	4813      	ldr	r0, [pc, #76]	; (8001c94 <main+0x1ec>)
 8001c48:	f000 fb04 	bl	8002254 <SCH_Add_Task>
  SCH_Add_Task(Button, 10,1);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	210a      	movs	r1, #10
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <main+0x1f0>)
 8001c52:	f000 faff 	bl	8002254 <SCH_Add_Task>
  SCH_Add_Task(play, 12,1);
 8001c56:	2201      	movs	r2, #1
 8001c58:	210c      	movs	r1, #12
 8001c5a:	4810      	ldr	r0, [pc, #64]	; (8001c9c <main+0x1f4>)
 8001c5c:	f000 fafa 	bl	8002254 <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)

  {
	  SCH_Dispatch_Tasks();
 8001c60:	f000 fbae 	bl	80023c0 <SCH_Dispatch_Tasks>
 8001c64:	e7fc      	b.n	8001c60 <main+0x1b8>
 8001c66:	bf00      	nop
 8001c68:	200000a8 	.word	0x200000a8
 8001c6c:	20000c90 	.word	0x20000c90
 8001c70:	200000b0 	.word	0x200000b0
 8001c74:	20000d4c 	.word	0x20000d4c
 8001c78:	20000d04 	.word	0x20000d04
 8001c7c:	20000c68 	.word	0x20000c68
 8001c80:	20000c70 	.word	0x20000c70
 8001c84:	40b00000 	.word	0x40b00000
 8001c88:	20000c78 	.word	0x20000c78
 8001c8c:	08001269 	.word	0x08001269
 8001c90:	080012c9 	.word	0x080012c9
 8001c94:	08001321 	.word	0x08001321
 8001c98:	08001385 	.word	0x08001385
 8001c9c:	080018bd 	.word	0x080018bd

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b094      	sub	sp, #80	; 0x50
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001caa:	2228      	movs	r2, #40	; 0x28
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fa58 	bl	8006164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 ffb2 	bl	8003c60 <HAL_RCC_OscConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d02:	f000 faa1 	bl	8002248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d06:	230f      	movs	r3, #15
 8001d08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2102      	movs	r1, #2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 fa1e 	bl	8004164 <HAL_RCC_ClockConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d2e:	f000 fa8b 	bl	8002248 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d32:	2302      	movs	r3, #2
 8001d34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fba8 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d4a:	f000 fa7d 	bl	8002248 <Error_Handler>
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3750      	adds	r7, #80	; 0x50
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001d6a:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <MX_ADC1_Init+0xdc>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001d84:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001d92:	2204      	movs	r2, #4
 8001d94:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d96:	4826      	ldr	r0, [pc, #152]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001d98:	f000 fe1e 	bl	80029d8 <HAL_ADC_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001da2:	f000 fa51 	bl	8002248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001dae:	2306      	movs	r3, #6
 8001db0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	481e      	ldr	r0, [pc, #120]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001db8:	f000 ffe0 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001dc2:	f000 fa41 	bl	8002248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4816      	ldr	r0, [pc, #88]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001dd8:	f000 ffd0 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001de2:	f000 fa31 	bl	8002248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001dea:	2303      	movs	r3, #3
 8001dec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001dee:	2304      	movs	r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	480e      	ldr	r0, [pc, #56]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001df8:	f000 ffc0 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001e02:	f000 fa21 	bl	8002248 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e06:	2304      	movs	r3, #4
 8001e08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001e0e:	2307      	movs	r3, #7
 8001e10:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <MX_ADC1_Init+0xd8>)
 8001e18:	f000 ffb0 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001e22:	f000 fa11 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000c90 	.word	0x20000c90
 8001e34:	40012400 	.word	0x40012400

08001e38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001e5e:	2247      	movs	r2, #71	; 0x47
 8001e60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001e6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e7c:	4813      	ldr	r0, [pc, #76]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001e7e:	f002 fbbf 	bl	8004600 <HAL_TIM_Base_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e88:	f000 f9de 	bl	8002248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	4619      	mov	r1, r3
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001e9a:	f002 ff0b 	bl	8004cb4 <HAL_TIM_ConfigClockSource>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ea4:	f000 f9d0 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_TIM2_Init+0x94>)
 8001eb6:	f003 fa89 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ec0:	f000 f9c2 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000d04 	.word	0x20000d04

08001ed0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <MX_USART1_UART_Init+0x50>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001edc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001f08:	f003 fad0 	bl	80054ac <HAL_UART_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f12:	f000 f999 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000d4c 	.word	0x20000d4c
 8001f20:	40013800 	.word	0x40013800

08001f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <MX_DMA_Init+0x48>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <MX_DMA_Init+0x48>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6153      	str	r3, [r2, #20]
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <MX_DMA_Init+0x48>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2101      	movs	r1, #1
 8001f46:	200b      	movs	r0, #11
 8001f48:	f001 f9e9 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f4c:	200b      	movs	r0, #11
 8001f4e:	f001 fa02 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2101      	movs	r1, #1
 8001f56:	200f      	movs	r0, #15
 8001f58:	f001 f9e1 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f5c:	200f      	movs	r0, #15
 8001f5e:	f001 f9fa 	bl	8003356 <HAL_NVIC_EnableIRQ>

}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <MX_GPIO_Init+0x110>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a3d      	ldr	r2, [pc, #244]	; (8002080 <MX_GPIO_Init+0x110>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <MX_GPIO_Init+0x110>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9c:	4b38      	ldr	r3, [pc, #224]	; (8002080 <MX_GPIO_Init+0x110>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a37      	ldr	r2, [pc, #220]	; (8002080 <MX_GPIO_Init+0x110>)
 8001fa2:	f043 0320 	orr.w	r3, r3, #32
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b35      	ldr	r3, [pc, #212]	; (8002080 <MX_GPIO_Init+0x110>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b32      	ldr	r3, [pc, #200]	; (8002080 <MX_GPIO_Init+0x110>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a31      	ldr	r2, [pc, #196]	; (8002080 <MX_GPIO_Init+0x110>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <MX_GPIO_Init+0x110>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fcc:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <MX_GPIO_Init+0x110>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <MX_GPIO_Init+0x110>)
 8001fd2:	f043 0308 	orr.w	r3, r3, #8
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <MX_GPIO_Init+0x110>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2128      	movs	r1, #40	; 0x28
 8001fe8:	4826      	ldr	r0, [pc, #152]	; (8002084 <MX_GPIO_Init+0x114>)
 8001fea:	f001 fe08 	bl	8003bfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff4:	4824      	ldr	r0, [pc, #144]	; (8002088 <MX_GPIO_Init+0x118>)
 8001ff6:	f001 fe02 	bl	8003bfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <MX_GPIO_Init+0x11c>)
 8002002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	4619      	mov	r1, r3
 800200e:	481e      	ldr	r0, [pc, #120]	; (8002088 <MX_GPIO_Init+0x118>)
 8002010:	f001 fc5a 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002014:	2328      	movs	r3, #40	; 0x28
 8002016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2302      	movs	r3, #2
 8002022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	4816      	ldr	r0, [pc, #88]	; (8002084 <MX_GPIO_Init+0x114>)
 800202c:	f001 fc4c 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	4619      	mov	r1, r3
 8002044:	4810      	ldr	r0, [pc, #64]	; (8002088 <MX_GPIO_Init+0x118>)
 8002046:	f001 fc3f 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800204a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2302      	movs	r3, #2
 800205a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	4619      	mov	r1, r3
 8002062:	4809      	ldr	r0, [pc, #36]	; (8002088 <MX_GPIO_Init+0x118>)
 8002064:	f001 fc30 	bl	80038c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2102      	movs	r1, #2
 800206c:	2028      	movs	r0, #40	; 0x28
 800206e:	f001 f956 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002072:	2028      	movs	r0, #40	; 0x28
 8002074:	f001 f96f 	bl	8003356 <HAL_NVIC_EnableIRQ>

}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	40010800 	.word	0x40010800
 8002088:	40011000 	.word	0x40011000
 800208c:	10110000 	.word	0x10110000

08002090 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   if (GPIO_Pin == GPIO_PIN_13){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a0:	d128      	bne.n	80020f4 <HAL_GPIO_EXTI_Callback+0x64>
	status= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80020a2:	2108      	movs	r1, #8
 80020a4:	4815      	ldr	r0, [pc, #84]	; (80020fc <HAL_GPIO_EXTI_Callback+0x6c>)
 80020a6:	f001 fd93 	bl	8003bd0 <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_GPIO_EXTI_Callback+0x70>)
 80020b0:	701a      	strb	r2, [r3, #0]
	if (status==0){
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_GPIO_EXTI_Callback+0x70>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10e      	bne.n	80020d8 <HAL_GPIO_EXTI_Callback+0x48>
			status=1;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_GPIO_EXTI_Callback+0x70>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80020c0:	2201      	movs	r2, #1
 80020c2:	2108      	movs	r1, #8
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <HAL_GPIO_EXTI_Callback+0x6c>)
 80020c6:	f001 fd9a 	bl	8003bfe <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1,"!1:button2:1#" , 12, 2);
 80020ca:	2302      	movs	r3, #2
 80020cc:	220c      	movs	r2, #12
 80020ce:	490d      	ldr	r1, [pc, #52]	; (8002104 <HAL_GPIO_EXTI_Callback+0x74>)
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <HAL_GPIO_EXTI_Callback+0x78>)
 80020d2:	f003 fa38 	bl	8005546 <HAL_UART_Transmit>
	}else{
			status=0;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
			HAL_UART_Transmit(&huart1,"!1:button2:0#" , 12, 2);
}
	}}
 80020d6:	e00d      	b.n	80020f4 <HAL_GPIO_EXTI_Callback+0x64>
			status=0;
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_GPIO_EXTI_Callback+0x70>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80020de:	2200      	movs	r2, #0
 80020e0:	2108      	movs	r1, #8
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <HAL_GPIO_EXTI_Callback+0x6c>)
 80020e4:	f001 fd8b 	bl	8003bfe <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1,"!1:button2:0#" , 12, 2);
 80020e8:	2302      	movs	r3, #2
 80020ea:	220c      	movs	r2, #12
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <HAL_GPIO_EXTI_Callback+0x7c>)
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <HAL_GPIO_EXTI_Callback+0x78>)
 80020f0:	f003 fa29 	bl	8005546 <HAL_UART_Transmit>
	}}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40010800 	.word	0x40010800
 8002100:	200000b1 	.word	0x200000b1
 8002104:	08006ab0 	.word	0x08006ab0
 8002108:	20000d4c 	.word	0x20000d4c
 800210c:	08006ac0 	.word	0x08006ac0

08002110 <HAL_UART_RxCpltCallback>:
//	 HAL_UART_Receive_IT(&huart1, data, 2);}
//
//
// }
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{if (huart->Instance == USART1) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_UART_RxCpltCallback+0xc8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d154      	bne.n	80021cc <HAL_UART_RxCpltCallback+0xbc>
	switch (rx){
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_UART_RxCpltCallback+0xcc>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	3b31      	subs	r3, #49	; 0x31
 8002128:	2b07      	cmp	r3, #7
 800212a:	d850      	bhi.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
 800212c:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <HAL_UART_RxCpltCallback+0x24>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002155 	.word	0x08002155
 8002138:	0800216d 	.word	0x0800216d
 800213c:	08002185 	.word	0x08002185
 8002140:	08002199 	.word	0x08002199
 8002144:	080021ad 	.word	0x080021ad
 8002148:	080021b5 	.word	0x080021b5
 800214c:	080021bd 	.word	0x080021bd
 8002150:	080021c5 	.word	0x080021c5
	case '1':  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002154:	2200      	movs	r2, #0
 8002156:	2120      	movs	r1, #32
 8002158:	4821      	ldr	r0, [pc, #132]	; (80021e0 <HAL_UART_RxCpltCallback+0xd0>)
 800215a:	f001 fd50 	bl	8003bfe <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1,"10" , 2, 2);
 800215e:	2302      	movs	r3, #2
 8002160:	2202      	movs	r2, #2
 8002162:	4920      	ldr	r1, [pc, #128]	; (80021e4 <HAL_UART_RxCpltCallback+0xd4>)
 8002164:	4820      	ldr	r0, [pc, #128]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002166:	f003 f9ee 	bl	8005546 <HAL_UART_Transmit>

				break;
 800216a:	e030      	b.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
	case '2':  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800216c:	2201      	movs	r2, #1
 800216e:	2120      	movs	r1, #32
 8002170:	481b      	ldr	r0, [pc, #108]	; (80021e0 <HAL_UART_RxCpltCallback+0xd0>)
 8002172:	f001 fd44 	bl	8003bfe <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1,"11" , 2, 2);
 8002176:	2302      	movs	r3, #2
 8002178:	2202      	movs	r2, #2
 800217a:	491c      	ldr	r1, [pc, #112]	; (80021ec <HAL_UART_RxCpltCallback+0xdc>)
 800217c:	481a      	ldr	r0, [pc, #104]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 800217e:	f003 f9e2 	bl	8005546 <HAL_UART_Transmit>
				break;
 8002182:	e024      	b.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
	case '3': 		 status_servo=0;
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_UART_RxCpltCallback+0xe0>)
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
//					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
					HAL_UART_Transmit(&huart1,"20" , 2, 2);
 800218a:	2302      	movs	r3, #2
 800218c:	2202      	movs	r2, #2
 800218e:	4919      	ldr	r1, [pc, #100]	; (80021f4 <HAL_UART_RxCpltCallback+0xe4>)
 8002190:	4815      	ldr	r0, [pc, #84]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002192:	f003 f9d8 	bl	8005546 <HAL_UART_Transmit>
					break;
 8002196:	e01a      	b.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
	case '4':  		status_servo=1;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_UART_RxCpltCallback+0xe0>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
//					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
					HAL_UART_Transmit(&huart1,"21" , 2, 2);
 800219e:	2302      	movs	r3, #2
 80021a0:	2202      	movs	r2, #2
 80021a2:	4915      	ldr	r1, [pc, #84]	; (80021f8 <HAL_UART_RxCpltCallback+0xe8>)
 80021a4:	4810      	ldr	r0, [pc, #64]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 80021a6:	f003 f9ce 	bl	8005546 <HAL_UART_Transmit>
					break;
 80021aa:	e010      	b.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
	case '5':  status_ack=0;
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_UART_RxCpltCallback+0xec>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
				break;
 80021b2:	e00c      	b.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
	case '6':  status_ack=1;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_UART_RxCpltCallback+0xec>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
				break;
 80021ba:	e008      	b.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
	case '7':  status_servo=1;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_UART_RxCpltCallback+0xe0>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
					break;
 80021c2:	e004      	b.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
	case '8':  status_servo=0;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_UART_RxCpltCallback+0xe0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
					break;
 80021ca:	e000      	b.n	80021ce <HAL_UART_RxCpltCallback+0xbe>
	}

}
 80021cc:	bf00      	nop
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40013800 	.word	0x40013800
 80021dc:	200000b0 	.word	0x200000b0
 80021e0:	40010800 	.word	0x40010800
 80021e4:	08006ad0 	.word	0x08006ad0
 80021e8:	20000d4c 	.word	0x20000d4c
 80021ec:	08006ad4 	.word	0x08006ad4
 80021f0:	200000b3 	.word	0x200000b3
 80021f4:	08006ad8 	.word	0x08006ad8
 80021f8:	08006adc 	.word	0x08006adc
 80021fc:	200000b2 	.word	0x200000b2

08002200 <HAL_TIM_PeriodElapsedCallback>:

int cou=0;
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d110      	bne.n	8002234 <HAL_TIM_PeriodElapsedCallback+0x34>
		SCH_Update();
 8002212:	f000 f875 	bl	8002300 <SCH_Update>
		currentMillis++;
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800221e:	6013      	str	r3, [r2, #0]
		currentMicros++;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	4a06      	ldr	r2, [pc, #24]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002228:	6013      	str	r3, [r2, #0]
	cou++;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002232:	6013      	str	r3, [r2, #0]




}}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200000d4 	.word	0x200000d4
 8002240:	200000d8 	.word	0x200000d8
 8002244:	20000dd4 	.word	0x20000dd4

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	e7fe      	b.n	8002250 <Error_Handler+0x8>
	...

08002254 <SCH_Add_Task>:
	current_index_task =0;
}

void SCH_Add_Task(void(*pFunction)(),
					uint32_t DELAY,
					uint32_t PERIOD){
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS){
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <SCH_Add_Task+0xa4>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b27      	cmp	r3, #39	; 0x27
 8002266:	d842      	bhi.n	80022ee <SCH_Add_Task+0x9a>
		SCH_tasks_G[current_index_task].pTask=pFunction;
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <SCH_Add_Task+0xa4>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	4a23      	ldr	r2, [pc, #140]	; (80022fc <SCH_Add_Task+0xa8>)
 8002270:	460b      	mov	r3, r1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay= DELAY;
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <SCH_Add_Task+0xa4>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <SCH_Add_Task+0xa8>)
 8002286:	460b      	mov	r3, r1
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	3304      	adds	r3, #4
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period= PERIOD;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <SCH_Add_Task+0xa4>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <SCH_Add_Task+0xa8>)
 800229e:	460b      	mov	r3, r1
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3308      	adds	r3, #8
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Runme= 0;
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <SCH_Add_Task+0xa4>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <SCH_Add_Task+0xa8>)
 80022b6:	460b      	mov	r3, r1
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	330c      	adds	r3, #12
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_index_task].TaskID= current_index_task;
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <SCH_Add_Task+0xa4>)
 80022c8:	781a      	ldrb	r2, [r3, #0]
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <SCH_Add_Task+0xa4>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SCH_Add_Task+0xa8>)
 80022d4:	460b      	mov	r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	3310      	adds	r3, #16
 80022e0:	6018      	str	r0, [r3, #0]
		current_index_task++;
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SCH_Add_Task+0xa4>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <SCH_Add_Task+0xa4>)
 80022ec:	701a      	strb	r2, [r3, #0]
	}}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	200010f8 	.word	0x200010f8
 80022fc:	20000dd8 	.word	0x20000dd8

08002300 <SCH_Update>:
void SCH_Update(void){
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
	for(int i=0;i<current_index_task; i++){
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	e048      	b.n	800239e <SCH_Update+0x9e>
		if(SCH_tasks_G[i].Delay>0){
 800230c:	492a      	ldr	r1, [pc, #168]	; (80023b8 <SCH_Update+0xb8>)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3304      	adds	r3, #4
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d013      	beq.n	800234a <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8002322:	4925      	ldr	r1, [pc, #148]	; (80023b8 <SCH_Update+0xb8>)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3304      	adds	r3, #4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1e59      	subs	r1, r3, #1
 8002336:	4820      	ldr	r0, [pc, #128]	; (80023b8 <SCH_Update+0xb8>)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4403      	add	r3, r0
 8002344:	3304      	adds	r3, #4
 8002346:	6019      	str	r1, [r3, #0]
 8002348:	e026      	b.n	8002398 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay=SCH_tasks_G[i].Period;
 800234a:	491b      	ldr	r1, [pc, #108]	; (80023b8 <SCH_Update+0xb8>)
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3308      	adds	r3, #8
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	4816      	ldr	r0, [pc, #88]	; (80023b8 <SCH_Update+0xb8>)
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4403      	add	r3, r0
 800236a:	3304      	adds	r3, #4
 800236c:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Runme +=1;
 800236e:	4912      	ldr	r1, [pc, #72]	; (80023b8 <SCH_Update+0xb8>)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	330c      	adds	r3, #12
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b2d8      	uxtb	r0, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <SCH_Update+0xb8>)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	330c      	adds	r3, #12
 8002394:	4602      	mov	r2, r0
 8002396:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<current_index_task; i++){
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3301      	adds	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <SCH_Update+0xbc>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4293      	cmp	r3, r2
 80023a8:	dbb0      	blt.n	800230c <SCH_Update+0xc>
		}
	}
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000dd8 	.word	0x20000dd8
 80023bc:	200010f8 	.word	0x200010f8

080023c0 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
	for(int i=0; i<current_index_task; i++){
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	e02b      	b.n	8002424 <SCH_Dispatch_Tasks+0x64>
		if(SCH_tasks_G[i].Runme >0){
 80023cc:	491b      	ldr	r1, [pc, #108]	; (800243c <SCH_Dispatch_Tasks+0x7c>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	330c      	adds	r3, #12
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01d      	beq.n	800241e <SCH_Dispatch_Tasks+0x5e>
			SCH_tasks_G[i].Runme--;
 80023e2:	4916      	ldr	r1, [pc, #88]	; (800243c <SCH_Dispatch_Tasks+0x7c>)
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	330c      	adds	r3, #12
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b2d8      	uxtb	r0, r3
 80023f8:	4910      	ldr	r1, [pc, #64]	; (800243c <SCH_Dispatch_Tasks+0x7c>)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	330c      	adds	r3, #12
 8002408:	4602      	mov	r2, r0
 800240a:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 800240c:	490b      	ldr	r1, [pc, #44]	; (800243c <SCH_Dispatch_Tasks+0x7c>)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4798      	blx	r3
	for(int i=0; i<current_index_task; i++){
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3301      	adds	r3, #1
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <SCH_Dispatch_Tasks+0x80>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4293      	cmp	r3, r2
 800242e:	dbcd      	blt.n	80023cc <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000dd8 	.word	0x20000dd8
 8002440:	200010f8 	.word	0x200010f8

08002444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_MspInit+0x5c>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <HAL_MspInit+0x5c>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6193      	str	r3, [r2, #24]
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_MspInit+0x5c>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_MspInit+0x5c>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <HAL_MspInit+0x5c>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_MspInit+0x5c>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_MspInit+0x60>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_MspInit+0x60>)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010000 	.word	0x40010000

080024a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <HAL_ADC_MspInit+0xbc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d149      	bne.n	800255c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80024f8:	2317      	movs	r3, #23
 80024fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fc:	2303      	movs	r3, #3
 80024fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4619      	mov	r1, r3
 8002506:	4819      	ldr	r0, [pc, #100]	; (800256c <HAL_ADC_MspInit+0xc4>)
 8002508:	f001 f9de 	bl	80038c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 8002510:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800252a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 800252e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002532:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002536:	2220      	movs	r2, #32
 8002538:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 800253c:	2200      	movs	r2, #0
 800253e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002540:	480b      	ldr	r0, [pc, #44]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002542:	f000 ff23 	bl	800338c <HAL_DMA_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800254c:	f7ff fe7c 	bl	8002248 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002554:	621a      	str	r2, [r3, #32]
 8002556:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40012400 	.word	0x40012400
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800
 8002570:	20000cc0 	.word	0x20000cc0
 8002574:	40020008 	.word	0x40020008

08002578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002588:	d113      	bne.n	80025b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_TIM_Base_MspInit+0x44>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_TIM_Base_MspInit+0x44>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_TIM_Base_MspInit+0x44>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	201c      	movs	r0, #28
 80025a8:	f000 feb9 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025ac:	201c      	movs	r0, #28
 80025ae:	f000 fed2 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_TIM_PWM_MspInit+0x34>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d10b      	bne.n	80025ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_TIM_PWM_MspInit+0x38>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <HAL_TIM_PWM_MspInit+0x38>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_TIM_PWM_MspInit+0x38>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_UART_MspInit+0xe8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d15f      	bne.n	80026dc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800261c:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <HAL_UART_MspInit+0xec>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <HAL_UART_MspInit+0xec>)
 8002622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <HAL_UART_MspInit+0xec>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_UART_MspInit+0xec>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <HAL_UART_MspInit+0xec>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_UART_MspInit+0xec>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800264c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	4619      	mov	r1, r3
 8002660:	4822      	ldr	r0, [pc, #136]	; (80026ec <HAL_UART_MspInit+0xf0>)
 8002662:	f001 f931 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	4619      	mov	r1, r3
 800267a:	481c      	ldr	r0, [pc, #112]	; (80026ec <HAL_UART_MspInit+0xf0>)
 800267c:	f001 f924 	bl	80038c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_UART_MspInit+0xf8>)
 8002684:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 80026a6:	2220      	movs	r2, #32
 80026a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026b0:	480f      	ldr	r0, [pc, #60]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 80026b2:	f000 fe6b 	bl	800338c <HAL_DMA_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80026bc:	f7ff fdc4 	bl	8002248 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_UART_MspInit+0xf4>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	2025      	movs	r0, #37	; 0x25
 80026d2:	f000 fe24 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026d6:	2025      	movs	r0, #37	; 0x25
 80026d8:	f000 fe3d 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026dc:	bf00      	nop
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40010800 	.word	0x40010800
 80026f0:	20000d90 	.word	0x20000d90
 80026f4:	40020058 	.word	0x40020058

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <NMI_Handler+0x4>

080026fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <HardFault_Handler+0x4>

08002704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <MemManage_Handler+0x4>

0800270a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <BusFault_Handler+0x4>

08002710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <UsageFault_Handler+0x4>

08002716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273e:	f000 f90b 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <DMA1_Channel1_IRQHandler+0x10>)
 800274e:	f000 ff87 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000cc0 	.word	0x20000cc0

0800275c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <DMA1_Channel5_IRQHandler+0x10>)
 8002762:	f000 ff7d 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000d90 	.word	0x20000d90

08002770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <TIM2_IRQHandler+0x10>)
 8002776:	f002 f8d7 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000d04 	.word	0x20000d04

08002784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <USART1_IRQHandler+0x10>)
 800278a:	f002 ff9f 	bl	80056cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000d4c 	.word	0x20000d4c

08002798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800279c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027a0:	f001 fa46 	bl	8003c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <_sbrk+0x5c>)
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <_sbrk+0x60>)
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <_sbrk+0x64>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <_sbrk+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d207      	bcs.n	80027e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d8:	f003 fc9a 	bl	8006110 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e009      	b.n	80027fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <_sbrk+0x64>)
 80027f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20005000 	.word	0x20005000
 8002808:	00000400 	.word	0x00000400
 800280c:	200010fc 	.word	0x200010fc
 8002810:	20001118 	.word	0x20001118

08002814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002822:	490d      	ldr	r1, [pc, #52]	; (8002858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002824:	4a0d      	ldr	r2, [pc, #52]	; (800285c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002828:	e002      	b.n	8002830 <LoopCopyDataInit>

0800282a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800282c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282e:	3304      	adds	r3, #4

08002830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002834:	d3f9      	bcc.n	800282a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002838:	4c0a      	ldr	r4, [pc, #40]	; (8002864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800283c:	e001      	b.n	8002842 <LoopFillZerobss>

0800283e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002840:	3204      	adds	r2, #4

08002842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002844:	d3fb      	bcc.n	800283e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002846:	f7ff ffe5 	bl	8002814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284a:	f003 fc67 	bl	800611c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800284e:	f7ff f92b 	bl	8001aa8 <main>
  bx lr
 8002852:	4770      	bx	lr
  ldr r0, =_sdata
 8002854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002858:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800285c:	08006bc4 	.word	0x08006bc4
  ldr r2, =_sbss
 8002860:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002864:	20001114 	.word	0x20001114

08002868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC1_2_IRQHandler>
	...

0800286c <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <DWT_Delay_Init+0x58>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <DWT_Delay_Init+0x58>)
 8002876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <DWT_Delay_Init+0x58>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <DWT_Delay_Init+0x58>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002886:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <DWT_Delay_Init+0x5c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <DWT_Delay_Init+0x5c>)
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <DWT_Delay_Init+0x5c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <DWT_Delay_Init+0x5c>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <DWT_Delay_Init+0x5c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80028a6:	bf00      	nop
    __ASM volatile ("NOP");
 80028a8:	bf00      	nop
    __ASM volatile ("NOP");
 80028aa:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <DWT_Delay_Init+0x5c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80028b8:	2301      	movs	r3, #1
    }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000edf0 	.word	0xe000edf0
 80028c8:	e0001000 	.word	0xe0001000

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_Init+0x28>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <HAL_Init+0x28>)
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f000 fd13 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e2:	200f      	movs	r0, #15
 80028e4:	f000 f808 	bl	80028f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e8:	f7ff fdac 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x54>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x58>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fd2b 	bl	8003372 <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 fcf3 	bl	800331e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <HAL_InitTick+0x5c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000008 	.word	0x20000008
 8002950:	20000010 	.word	0x20000010
 8002954:	2000000c 	.word	0x2000000c

08002958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_IncTick+0x1c>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_IncTick+0x20>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <HAL_IncTick+0x20>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000010 	.word	0x20000010
 8002978:	20001100 	.word	0x20001100

0800297c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <HAL_GetTick+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	20001100 	.word	0x20001100

08002990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002998:	f7ff fff0 	bl	800297c <HAL_GetTick>
 800299c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d005      	beq.n	80029b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_Delay+0x44>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029b6:	bf00      	nop
 80029b8:	f7ff ffe0 	bl	800297c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d8f7      	bhi.n	80029b8 <HAL_Delay+0x28>
  {
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000010 	.word	0x20000010

080029d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0be      	b.n	8002b78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fd46 	bl	80024a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 faff 	bl	8003020 <ADC_ConversionStop_Disable>
 8002a22:	4603      	mov	r3, r0
 8002a24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8099 	bne.w	8002b66 <HAL_ADC_Init+0x18e>
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 8095 	bne.w	8002b66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a44:	f023 0302 	bic.w	r3, r3, #2
 8002a48:	f043 0202 	orr.w	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7b1b      	ldrb	r3, [r3, #12]
 8002a5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a70:	d003      	beq.n	8002a7a <HAL_ADC_Init+0xa2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d102      	bne.n	8002a80 <HAL_ADC_Init+0xa8>
 8002a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7e:	e000      	b.n	8002a82 <HAL_ADC_Init+0xaa>
 8002a80:	2300      	movs	r3, #0
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7d1b      	ldrb	r3, [r3, #20]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d119      	bne.n	8002ac4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7b1b      	ldrb	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	035a      	lsls	r2, r3, #13
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_ADC_Init+0x1a8>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af4:	d003      	beq.n	8002afe <HAL_ADC_Init+0x126>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d104      	bne.n	8002b08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	051b      	lsls	r3, r3, #20
 8002b06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <HAL_ADC_Init+0x1ac>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d10b      	bne.n	8002b44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b42:	e018      	b.n	8002b76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	f023 0312 	bic.w	r3, r3, #18
 8002b4c:	f043 0210 	orr.w	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b64:	e007      	b.n	8002b76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	ffe1f7fd 	.word	0xffe1f7fd
 8002b84:	ff1f0efe 	.word	0xff1f0efe

08002b88 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a64      	ldr	r2, [pc, #400]	; (8002d30 <HAL_ADC_Start_DMA+0x1a8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_ADC_Start_DMA+0x24>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a63      	ldr	r2, [pc, #396]	; (8002d34 <HAL_ADC_Start_DMA+0x1ac>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d106      	bne.n	8002bba <HAL_ADC_Start_DMA+0x32>
 8002bac:	4b60      	ldr	r3, [pc, #384]	; (8002d30 <HAL_ADC_Start_DMA+0x1a8>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 80b3 	bne.w	8002d20 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x40>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0ae      	b.n	8002d26 <HAL_ADC_Start_DMA+0x19e>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f9cb 	bl	8002f6c <ADC_Enable>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 809a 	bne.w	8002d16 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a4e      	ldr	r2, [pc, #312]	; (8002d34 <HAL_ADC_Start_DMA+0x1ac>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d105      	bne.n	8002c0c <HAL_ADC_Start_DMA+0x84>
 8002c00:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <HAL_ADC_Start_DMA+0x1a8>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d115      	bne.n	8002c38 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d026      	beq.n	8002c74 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c36:	e01d      	b.n	8002c74 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a39      	ldr	r2, [pc, #228]	; (8002d30 <HAL_ADC_Start_DMA+0x1a8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADC_Start_DMA+0xd0>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a38      	ldr	r2, [pc, #224]	; (8002d34 <HAL_ADC_Start_DMA+0x1ac>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10d      	bne.n	8002c74 <HAL_ADC_Start_DMA+0xec>
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_ADC_Start_DMA+0x1a8>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f023 0206 	bic.w	r2, r3, #6
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c8c:	e002      	b.n	8002c94 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <HAL_ADC_Start_DMA+0x1b0>)
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_ADC_Start_DMA+0x1b4>)
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <HAL_ADC_Start_DMA+0x1b8>)
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0202 	mvn.w	r2, #2
 8002cbc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a18      	ldr	r0, [r3, #32]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	334c      	adds	r3, #76	; 0x4c
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f000 fbaf 	bl	8003440 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cf0:	d108      	bne.n	8002d04 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d00:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d02:	e00f      	b.n	8002d24 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d12:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d14:	e006      	b.n	8002d24 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002d1e:	e001      	b.n	8002d24 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40012400 	.word	0x40012400
 8002d34:	40012800 	.word	0x40012800
 8002d38:	080030a3 	.word	0x080030a3
 8002d3c:	0800311f 	.word	0x0800311f
 8002d40:	0800313b 	.word	0x0800313b

08002d44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x20>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0dc      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1da>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d81c      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b05      	subs	r3, #5
 8002dbe:	221f      	movs	r2, #31
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4019      	ands	r1, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b05      	subs	r3, #5
 8002dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34
 8002de4:	e03c      	b.n	8002e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d81c      	bhi.n	8002e28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3b23      	subs	r3, #35	; 0x23
 8002e00:	221f      	movs	r2, #31
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4019      	ands	r1, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	3b23      	subs	r3, #35	; 0x23
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
 8002e26:	e01b      	b.n	8002e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	3b41      	subs	r3, #65	; 0x41
 8002e3a:	221f      	movs	r2, #31
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	4019      	ands	r1, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3b41      	subs	r3, #65	; 0x41
 8002e54:	fa00 f203 	lsl.w	r2, r0, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	d91c      	bls.n	8002ea2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68d9      	ldr	r1, [r3, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4019      	ands	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6898      	ldr	r0, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	3b1e      	subs	r3, #30
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	e019      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6919      	ldr	r1, [r3, #16]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d003      	beq.n	8002ee6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	d132      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_ADC_ConfigChannel+0x1e4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d125      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d126      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d11a      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	0c9a      	lsrs	r2, r3, #18
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f2c:	e002      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f9      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x1b2>
 8002f3a:	e007      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012400 	.word	0x40012400
 8002f64:	20000008 	.word	0x20000008
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d040      	beq.n	800300c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <ADC_Enable+0xac>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1f      	ldr	r2, [pc, #124]	; (800301c <ADC_Enable+0xb0>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fa8:	e002      	b.n	8002fb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f9      	bne.n	8002faa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fb6:	f7ff fce1 	bl	800297c <HAL_GetTick>
 8002fba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fbc:	e01f      	b.n	8002ffe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fbe:	f7ff fcdd 	bl	800297c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d918      	bls.n	8002ffe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d011      	beq.n	8002ffe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f043 0210 	orr.w	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e007      	b.n	800300e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d1d8      	bne.n	8002fbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000008 	.word	0x20000008
 800301c:	431bde83 	.word	0x431bde83

08003020 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d12e      	bne.n	8003098 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800304a:	f7ff fc97 	bl	800297c <HAL_GetTick>
 800304e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003050:	e01b      	b.n	800308a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003052:	f7ff fc93 	bl	800297c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d914      	bls.n	800308a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10d      	bne.n	800308a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f043 0210 	orr.w	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e007      	b.n	800309a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d0dc      	beq.n	8003052 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d127      	bne.n	800310c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030d6:	d115      	bne.n	8003104 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff fe1d 	bl	8002d44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800310a:	e004      	b.n	8003116 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff fe12 	bl	8002d56 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	f043 0204 	orr.w	r2, r3, #4
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff fe01 	bl	8002d68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800318c:	4013      	ands	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800319c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	60d3      	str	r3, [r2, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <__NVIC_GetPriorityGrouping+0x18>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 0307 	and.w	r3, r3, #7
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	db0b      	blt.n	80031fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	4906      	ldr	r1, [pc, #24]	; (8003208 <__NVIC_EnableIRQ+0x34>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2001      	movs	r0, #1
 80031f6:	fa00 f202 	lsl.w	r2, r0, r2
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100

0800320c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db0a      	blt.n	8003236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	490c      	ldr	r1, [pc, #48]	; (8003258 <__NVIC_SetPriority+0x4c>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	440b      	add	r3, r1
 8003230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003234:	e00a      	b.n	800324c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4908      	ldr	r1, [pc, #32]	; (800325c <__NVIC_SetPriority+0x50>)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	3b04      	subs	r3, #4
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	440b      	add	r3, r1
 800324a:	761a      	strb	r2, [r3, #24]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000e100 	.word	0xe000e100
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f1c3 0307 	rsb	r3, r3, #7
 800327a:	2b04      	cmp	r3, #4
 800327c:	bf28      	it	cs
 800327e:	2304      	movcs	r3, #4
 8003280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3304      	adds	r3, #4
 8003286:	2b06      	cmp	r3, #6
 8003288:	d902      	bls.n	8003290 <NVIC_EncodePriority+0x30>
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3b03      	subs	r3, #3
 800328e:	e000      	b.n	8003292 <NVIC_EncodePriority+0x32>
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	401a      	ands	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	43d9      	mvns	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	4313      	orrs	r3, r2
         );
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3724      	adds	r7, #36	; 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d4:	d301      	bcc.n	80032da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00f      	b.n	80032fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <SysTick_Config+0x40>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e2:	210f      	movs	r1, #15
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f7ff ff90 	bl	800320c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <SysTick_Config+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <SysTick_Config+0x40>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff2d 	bl	8003170 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff42 	bl	80031b8 <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff90 	bl	8003260 <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5f 	bl	800320c <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff35 	bl	80031d4 <__NVIC_EnableIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ffa2 	bl	80032c4 <SysTick_Config>
 8003380:	4603      	mov	r3, r0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e043      	b.n	800342a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <HAL_DMA_Init+0xa8>)
 80033aa:	4413      	add	r3, r2
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <HAL_DMA_Init+0xac>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	009a      	lsls	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a1f      	ldr	r2, [pc, #124]	; (800343c <HAL_DMA_Init+0xb0>)
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	bffdfff8 	.word	0xbffdfff8
 8003438:	cccccccd 	.word	0xcccccccd
 800343c:	40020000 	.word	0x40020000

08003440 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_DMA_Start_IT+0x20>
 800345c:	2302      	movs	r3, #2
 800345e:	e04a      	b.n	80034f6 <HAL_DMA_Start_IT+0xb6>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800346e:	2b01      	cmp	r3, #1
 8003470:	d13a      	bne.n	80034e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f9e8 	bl	800386c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 020e 	orr.w	r2, r2, #14
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e00f      	b.n	80034d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0204 	bic.w	r2, r2, #4
 80034c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 020a 	orr.w	r2, r2, #10
 80034d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e005      	b.n	80034f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
 80034f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003510:	2b02      	cmp	r3, #2
 8003512:	d008      	beq.n	8003526 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2204      	movs	r2, #4
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e020      	b.n	8003568 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 020e 	bic.w	r2, r2, #14
 8003534:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	2101      	movs	r1, #1
 8003550:	fa01 f202 	lsl.w	r2, r1, r2
 8003554:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
	...

08003574 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003586:	2b02      	cmp	r3, #2
 8003588:	d005      	beq.n	8003596 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2204      	movs	r2, #4
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e051      	b.n	800363a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 020e 	bic.w	r2, r2, #14
 80035a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a22      	ldr	r2, [pc, #136]	; (8003644 <HAL_DMA_Abort_IT+0xd0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d029      	beq.n	8003614 <HAL_DMA_Abort_IT+0xa0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_DMA_Abort_IT+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d022      	beq.n	8003610 <HAL_DMA_Abort_IT+0x9c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_DMA_Abort_IT+0xd8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d01a      	beq.n	800360a <HAL_DMA_Abort_IT+0x96>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_DMA_Abort_IT+0xdc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d012      	beq.n	8003604 <HAL_DMA_Abort_IT+0x90>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_DMA_Abort_IT+0xe0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00a      	beq.n	80035fe <HAL_DMA_Abort_IT+0x8a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <HAL_DMA_Abort_IT+0xe4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d102      	bne.n	80035f8 <HAL_DMA_Abort_IT+0x84>
 80035f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035f6:	e00e      	b.n	8003616 <HAL_DMA_Abort_IT+0xa2>
 80035f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035fc:	e00b      	b.n	8003616 <HAL_DMA_Abort_IT+0xa2>
 80035fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003602:	e008      	b.n	8003616 <HAL_DMA_Abort_IT+0xa2>
 8003604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003608:	e005      	b.n	8003616 <HAL_DMA_Abort_IT+0xa2>
 800360a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360e:	e002      	b.n	8003616 <HAL_DMA_Abort_IT+0xa2>
 8003610:	2310      	movs	r3, #16
 8003612:	e000      	b.n	8003616 <HAL_DMA_Abort_IT+0xa2>
 8003614:	2301      	movs	r3, #1
 8003616:	4a11      	ldr	r2, [pc, #68]	; (800365c <HAL_DMA_Abort_IT+0xe8>)
 8003618:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
    } 
  }
  return status;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40020008 	.word	0x40020008
 8003648:	4002001c 	.word	0x4002001c
 800364c:	40020030 	.word	0x40020030
 8003650:	40020044 	.word	0x40020044
 8003654:	40020058 	.word	0x40020058
 8003658:	4002006c 	.word	0x4002006c
 800365c:	40020000 	.word	0x40020000

08003660 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2204      	movs	r2, #4
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d04f      	beq.n	8003728 <HAL_DMA_IRQHandler+0xc8>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d04a      	beq.n	8003728 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d107      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a66      	ldr	r2, [pc, #408]	; (8003850 <HAL_DMA_IRQHandler+0x1f0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d029      	beq.n	800370e <HAL_DMA_IRQHandler+0xae>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a65      	ldr	r2, [pc, #404]	; (8003854 <HAL_DMA_IRQHandler+0x1f4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_IRQHandler+0xaa>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a63      	ldr	r2, [pc, #396]	; (8003858 <HAL_DMA_IRQHandler+0x1f8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01a      	beq.n	8003704 <HAL_DMA_IRQHandler+0xa4>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a62      	ldr	r2, [pc, #392]	; (800385c <HAL_DMA_IRQHandler+0x1fc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d012      	beq.n	80036fe <HAL_DMA_IRQHandler+0x9e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a60      	ldr	r2, [pc, #384]	; (8003860 <HAL_DMA_IRQHandler+0x200>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00a      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x98>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a5f      	ldr	r2, [pc, #380]	; (8003864 <HAL_DMA_IRQHandler+0x204>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d102      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x92>
 80036ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036f0:	e00e      	b.n	8003710 <HAL_DMA_IRQHandler+0xb0>
 80036f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036f6:	e00b      	b.n	8003710 <HAL_DMA_IRQHandler+0xb0>
 80036f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036fc:	e008      	b.n	8003710 <HAL_DMA_IRQHandler+0xb0>
 80036fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003702:	e005      	b.n	8003710 <HAL_DMA_IRQHandler+0xb0>
 8003704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003708:	e002      	b.n	8003710 <HAL_DMA_IRQHandler+0xb0>
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	e000      	b.n	8003710 <HAL_DMA_IRQHandler+0xb0>
 800370e:	2304      	movs	r3, #4
 8003710:	4a55      	ldr	r2, [pc, #340]	; (8003868 <HAL_DMA_IRQHandler+0x208>)
 8003712:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8094 	beq.w	8003846 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003726:	e08e      	b.n	8003846 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2202      	movs	r2, #2
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d056      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x186>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d051      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 020a 	bic.w	r2, r2, #10
 800375e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a38      	ldr	r2, [pc, #224]	; (8003850 <HAL_DMA_IRQHandler+0x1f0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d029      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x166>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a37      	ldr	r2, [pc, #220]	; (8003854 <HAL_DMA_IRQHandler+0x1f4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x162>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a35      	ldr	r2, [pc, #212]	; (8003858 <HAL_DMA_IRQHandler+0x1f8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01a      	beq.n	80037bc <HAL_DMA_IRQHandler+0x15c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a34      	ldr	r2, [pc, #208]	; (800385c <HAL_DMA_IRQHandler+0x1fc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d012      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x156>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a32      	ldr	r2, [pc, #200]	; (8003860 <HAL_DMA_IRQHandler+0x200>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00a      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x150>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a31      	ldr	r2, [pc, #196]	; (8003864 <HAL_DMA_IRQHandler+0x204>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d102      	bne.n	80037aa <HAL_DMA_IRQHandler+0x14a>
 80037a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037a8:	e00e      	b.n	80037c8 <HAL_DMA_IRQHandler+0x168>
 80037aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ae:	e00b      	b.n	80037c8 <HAL_DMA_IRQHandler+0x168>
 80037b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037b4:	e008      	b.n	80037c8 <HAL_DMA_IRQHandler+0x168>
 80037b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ba:	e005      	b.n	80037c8 <HAL_DMA_IRQHandler+0x168>
 80037bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c0:	e002      	b.n	80037c8 <HAL_DMA_IRQHandler+0x168>
 80037c2:	2320      	movs	r3, #32
 80037c4:	e000      	b.n	80037c8 <HAL_DMA_IRQHandler+0x168>
 80037c6:	2302      	movs	r3, #2
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <HAL_DMA_IRQHandler+0x208>)
 80037ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d034      	beq.n	8003846 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037e4:	e02f      	b.n	8003846 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	2208      	movs	r2, #8
 80037ec:	409a      	lsls	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d028      	beq.n	8003848 <HAL_DMA_IRQHandler+0x1e8>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d023      	beq.n	8003848 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 020e 	bic.w	r2, r2, #14
 800380e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
    }
  }
  return;
 8003846:	bf00      	nop
 8003848:	bf00      	nop
}
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40020008 	.word	0x40020008
 8003854:	4002001c 	.word	0x4002001c
 8003858:	40020030 	.word	0x40020030
 800385c:	40020044 	.word	0x40020044
 8003860:	40020058 	.word	0x40020058
 8003864:	4002006c 	.word	0x4002006c
 8003868:	40020000 	.word	0x40020000

0800386c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b10      	cmp	r3, #16
 8003898:	d108      	bne.n	80038ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038aa:	e007      	b.n	80038bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b08b      	sub	sp, #44	; 0x2c
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038da:	e169      	b.n	8003bb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038dc:	2201      	movs	r2, #1
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f040 8158 	bne.w	8003baa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a9a      	ldr	r2, [pc, #616]	; (8003b68 <HAL_GPIO_Init+0x2a0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d05e      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 8003904:	4a98      	ldr	r2, [pc, #608]	; (8003b68 <HAL_GPIO_Init+0x2a0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d875      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 800390a:	4a98      	ldr	r2, [pc, #608]	; (8003b6c <HAL_GPIO_Init+0x2a4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d058      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 8003910:	4a96      	ldr	r2, [pc, #600]	; (8003b6c <HAL_GPIO_Init+0x2a4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d86f      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 8003916:	4a96      	ldr	r2, [pc, #600]	; (8003b70 <HAL_GPIO_Init+0x2a8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d052      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 800391c:	4a94      	ldr	r2, [pc, #592]	; (8003b70 <HAL_GPIO_Init+0x2a8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d869      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 8003922:	4a94      	ldr	r2, [pc, #592]	; (8003b74 <HAL_GPIO_Init+0x2ac>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d04c      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 8003928:	4a92      	ldr	r2, [pc, #584]	; (8003b74 <HAL_GPIO_Init+0x2ac>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d863      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 800392e:	4a92      	ldr	r2, [pc, #584]	; (8003b78 <HAL_GPIO_Init+0x2b0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d046      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 8003934:	4a90      	ldr	r2, [pc, #576]	; (8003b78 <HAL_GPIO_Init+0x2b0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d85d      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 800393a:	2b12      	cmp	r3, #18
 800393c:	d82a      	bhi.n	8003994 <HAL_GPIO_Init+0xcc>
 800393e:	2b12      	cmp	r3, #18
 8003940:	d859      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_GPIO_Init+0x80>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	080039c3 	.word	0x080039c3
 800394c:	0800399d 	.word	0x0800399d
 8003950:	080039af 	.word	0x080039af
 8003954:	080039f1 	.word	0x080039f1
 8003958:	080039f7 	.word	0x080039f7
 800395c:	080039f7 	.word	0x080039f7
 8003960:	080039f7 	.word	0x080039f7
 8003964:	080039f7 	.word	0x080039f7
 8003968:	080039f7 	.word	0x080039f7
 800396c:	080039f7 	.word	0x080039f7
 8003970:	080039f7 	.word	0x080039f7
 8003974:	080039f7 	.word	0x080039f7
 8003978:	080039f7 	.word	0x080039f7
 800397c:	080039f7 	.word	0x080039f7
 8003980:	080039f7 	.word	0x080039f7
 8003984:	080039f7 	.word	0x080039f7
 8003988:	080039f7 	.word	0x080039f7
 800398c:	080039a5 	.word	0x080039a5
 8003990:	080039b9 	.word	0x080039b9
 8003994:	4a79      	ldr	r2, [pc, #484]	; (8003b7c <HAL_GPIO_Init+0x2b4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800399a:	e02c      	b.n	80039f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	623b      	str	r3, [r7, #32]
          break;
 80039a2:	e029      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	3304      	adds	r3, #4
 80039aa:	623b      	str	r3, [r7, #32]
          break;
 80039ac:	e024      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	3308      	adds	r3, #8
 80039b4:	623b      	str	r3, [r7, #32]
          break;
 80039b6:	e01f      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	330c      	adds	r3, #12
 80039be:	623b      	str	r3, [r7, #32]
          break;
 80039c0:	e01a      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ca:	2304      	movs	r3, #4
 80039cc:	623b      	str	r3, [r7, #32]
          break;
 80039ce:	e013      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039d8:	2308      	movs	r3, #8
 80039da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	611a      	str	r2, [r3, #16]
          break;
 80039e2:	e009      	b.n	80039f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039e4:	2308      	movs	r3, #8
 80039e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	615a      	str	r2, [r3, #20]
          break;
 80039ee:	e003      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039f0:	2300      	movs	r3, #0
 80039f2:	623b      	str	r3, [r7, #32]
          break;
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          break;
 80039f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2bff      	cmp	r3, #255	; 0xff
 80039fc:	d801      	bhi.n	8003a02 <HAL_GPIO_Init+0x13a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	e001      	b.n	8003a06 <HAL_GPIO_Init+0x13e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2bff      	cmp	r3, #255	; 0xff
 8003a0c:	d802      	bhi.n	8003a14 <HAL_GPIO_Init+0x14c>
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	e002      	b.n	8003a1a <HAL_GPIO_Init+0x152>
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	3b08      	subs	r3, #8
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	210f      	movs	r1, #15
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	6a39      	ldr	r1, [r7, #32]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80b1 	beq.w	8003baa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a48:	4b4d      	ldr	r3, [pc, #308]	; (8003b80 <HAL_GPIO_Init+0x2b8>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	4a4c      	ldr	r2, [pc, #304]	; (8003b80 <HAL_GPIO_Init+0x2b8>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6193      	str	r3, [r2, #24]
 8003a54:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_GPIO_Init+0x2b8>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a60:	4a48      	ldr	r2, [pc, #288]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4013      	ands	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <HAL_GPIO_Init+0x2c0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_GPIO_Init+0x1ec>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	; (8003b8c <HAL_GPIO_Init+0x2c4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00d      	beq.n	8003ab0 <HAL_GPIO_Init+0x1e8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a3e      	ldr	r2, [pc, #248]	; (8003b90 <HAL_GPIO_Init+0x2c8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <HAL_GPIO_Init+0x1e4>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3d      	ldr	r2, [pc, #244]	; (8003b94 <HAL_GPIO_Init+0x2cc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_GPIO_Init+0x1e0>
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e006      	b.n	8003ab6 <HAL_GPIO_Init+0x1ee>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	e004      	b.n	8003ab6 <HAL_GPIO_Init+0x1ee>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e002      	b.n	8003ab6 <HAL_GPIO_Init+0x1ee>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_GPIO_Init+0x1ee>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	f002 0203 	and.w	r2, r2, #3
 8003abc:	0092      	lsls	r2, r2, #2
 8003abe:	4093      	lsls	r3, r2
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ac6:	492f      	ldr	r1, [pc, #188]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	3302      	adds	r3, #2
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d006      	beq.n	8003aee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	492c      	ldr	r1, [pc, #176]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e006      	b.n	8003afc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003aee:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	4928      	ldr	r1, [pc, #160]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d006      	beq.n	8003b16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4922      	ldr	r1, [pc, #136]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
 8003b14:	e006      	b.n	8003b24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	491e      	ldr	r1, [pc, #120]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d006      	beq.n	8003b3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	4918      	ldr	r1, [pc, #96]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
 8003b3c:	e006      	b.n	8003b4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	4914      	ldr	r1, [pc, #80]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d021      	beq.n	8003b9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60cb      	str	r3, [r1, #12]
 8003b64:	e021      	b.n	8003baa <HAL_GPIO_Init+0x2e2>
 8003b66:	bf00      	nop
 8003b68:	10320000 	.word	0x10320000
 8003b6c:	10310000 	.word	0x10310000
 8003b70:	10220000 	.word	0x10220000
 8003b74:	10210000 	.word	0x10210000
 8003b78:	10120000 	.word	0x10120000
 8003b7c:	10110000 	.word	0x10110000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010800 	.word	0x40010800
 8003b8c:	40010c00 	.word	0x40010c00
 8003b90:	40011000 	.word	0x40011000
 8003b94:	40011400 	.word	0x40011400
 8003b98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	4909      	ldr	r1, [pc, #36]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3301      	adds	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f47f ae8e 	bne.w	80038dc <HAL_GPIO_Init+0x14>
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	372c      	adds	r7, #44	; 0x2c
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40010400 	.word	0x40010400

08003bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e001      	b.n	8003bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	807b      	strh	r3, [r7, #2]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c0e:	787b      	ldrb	r3, [r7, #1]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c14:	887a      	ldrh	r2, [r7, #2]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c1a:	e003      	b.n	8003c24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c1c:	887b      	ldrh	r3, [r7, #2]
 8003c1e:	041a      	lsls	r2, r3, #16
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c46:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fa1e 	bl	8002090 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40010400 	.word	0x40010400

08003c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e272      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8087 	beq.w	8003d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c80:	4b92      	ldr	r3, [pc, #584]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c8c:	4b8f      	ldr	r3, [pc, #572]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d112      	bne.n	8003cbe <HAL_RCC_OscConfig+0x5e>
 8003c98:	4b8c      	ldr	r3, [pc, #560]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d10b      	bne.n	8003cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca6:	4b89      	ldr	r3, [pc, #548]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d06c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x12c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d168      	bne.n	8003d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e24c      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x76>
 8003cc8:	4b80      	ldr	r3, [pc, #512]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a7f      	ldr	r2, [pc, #508]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e02e      	b.n	8003d34 <HAL_RCC_OscConfig+0xd4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x98>
 8003cde:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7a      	ldr	r2, [pc, #488]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b78      	ldr	r3, [pc, #480]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a77      	ldr	r2, [pc, #476]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xd4>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0xbc>
 8003d02:	4b72      	ldr	r3, [pc, #456]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a71      	ldr	r2, [pc, #452]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xd4>
 8003d1c:	4b6b      	ldr	r3, [pc, #428]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6a      	ldr	r2, [pc, #424]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b68      	ldr	r3, [pc, #416]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a67      	ldr	r2, [pc, #412]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fe1e 	bl	800297c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fe fe1a 	bl	800297c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e200      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b5d      	ldr	r3, [pc, #372]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xe4>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fe0a 	bl	800297c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fe06 	bl	800297c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1ec      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x10c>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d9a:	4b4c      	ldr	r3, [pc, #304]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003da6:	4b49      	ldr	r3, [pc, #292]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x18c>
 8003db2:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x176>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1c0      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4939      	ldr	r1, [pc, #228]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e03a      	b.n	8003e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <HAL_RCC_OscConfig+0x270>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fdbf 	bl	800297c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fe fdbb 	bl	800297c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1a1      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4927      	ldr	r1, [pc, #156]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <HAL_RCC_OscConfig+0x270>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fd9e 	bl	800297c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fe fd9a 	bl	800297c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e180      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03a      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d019      	beq.n	8003eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <HAL_RCC_OscConfig+0x274>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fd7e 	bl	800297c <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e84:	f7fe fd7a 	bl	800297c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e160      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_RCC_OscConfig+0x26c>)
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	f000 fad8 	bl	8004458 <RCC_Delay>
 8003ea8:	e01c      	b.n	8003ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <HAL_RCC_OscConfig+0x274>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb0:	f7fe fd64 	bl	800297c <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb6:	e00f      	b.n	8003ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb8:	f7fe fd60 	bl	800297c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d908      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e146      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	42420000 	.word	0x42420000
 8003ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed8:	4b92      	ldr	r3, [pc, #584]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e9      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a6 	beq.w	800403e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef6:	4b8b      	ldr	r3, [pc, #556]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10d      	bne.n	8003f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4a87      	ldr	r2, [pc, #540]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	61d3      	str	r3, [r2, #28]
 8003f0e:	4b85      	ldr	r3, [pc, #532]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1e:	4b82      	ldr	r3, [pc, #520]	; (8004128 <HAL_RCC_OscConfig+0x4c8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d118      	bne.n	8003f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2a:	4b7f      	ldr	r3, [pc, #508]	; (8004128 <HAL_RCC_OscConfig+0x4c8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7e      	ldr	r2, [pc, #504]	; (8004128 <HAL_RCC_OscConfig+0x4c8>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f36:	f7fe fd21 	bl	800297c <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3e:	f7fe fd1d 	bl	800297c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e103      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x4c8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x312>
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	4a6e      	ldr	r2, [pc, #440]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6213      	str	r3, [r2, #32]
 8003f70:	e02d      	b.n	8003fce <HAL_RCC_OscConfig+0x36e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x334>
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4a69      	ldr	r2, [pc, #420]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6213      	str	r3, [r2, #32]
 8003f86:	4b67      	ldr	r3, [pc, #412]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a66      	ldr	r2, [pc, #408]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	f023 0304 	bic.w	r3, r3, #4
 8003f90:	6213      	str	r3, [r2, #32]
 8003f92:	e01c      	b.n	8003fce <HAL_RCC_OscConfig+0x36e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x356>
 8003f9c:	4b61      	ldr	r3, [pc, #388]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	4a60      	ldr	r2, [pc, #384]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6213      	str	r3, [r2, #32]
 8003fa8:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4a5d      	ldr	r2, [pc, #372]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6213      	str	r3, [r2, #32]
 8003fb4:	e00b      	b.n	8003fce <HAL_RCC_OscConfig+0x36e>
 8003fb6:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4a5a      	ldr	r2, [pc, #360]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6213      	str	r3, [r2, #32]
 8003fc2:	4b58      	ldr	r3, [pc, #352]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fcd1 	bl	800297c <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe fccd 	bl	800297c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0b1      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ee      	beq.n	8003fde <HAL_RCC_OscConfig+0x37e>
 8004000:	e014      	b.n	800402c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fe fcbb 	bl	800297c <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe fcb7 	bl	800297c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e09b      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004020:	4b40      	ldr	r3, [pc, #256]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ee      	bne.n	800400a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d105      	bne.n	800403e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004032:	4b3c      	ldr	r3, [pc, #240]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4a3b      	ldr	r2, [pc, #236]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8087 	beq.w	8004156 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d061      	beq.n	8004118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d146      	bne.n	80040ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4b33      	ldr	r3, [pc, #204]	; (800412c <HAL_RCC_OscConfig+0x4cc>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fe fc8b 	bl	800297c <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe fc87 	bl	800297c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e06d      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407c:	4b29      	ldr	r3, [pc, #164]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d108      	bne.n	80040a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4921      	ldr	r1, [pc, #132]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a19      	ldr	r1, [r3, #32]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	430b      	orrs	r3, r1
 80040b6:	491b      	ldr	r1, [pc, #108]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x4cc>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe fc5b 	bl	800297c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe fc57 	bl	800297c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e03d      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x46a>
 80040e8:	e035      	b.n	8004156 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_RCC_OscConfig+0x4cc>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe fc44 	bl	800297c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe fc40 	bl	800297c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e026      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x498>
 8004116:	e01e      	b.n	8004156 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e019      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
 8004124:	40021000 	.word	0x40021000
 8004128:	40007000 	.word	0x40007000
 800412c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_OscConfig+0x500>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	429a      	cmp	r2, r3
 8004142:	d106      	bne.n	8004152 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d001      	beq.n	8004156 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000

08004164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0d0      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d910      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 0207 	bic.w	r2, r3, #7
 800418e:	4965      	ldr	r1, [pc, #404]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0b8      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4a52      	ldr	r2, [pc, #328]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	494d      	ldr	r1, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d040      	beq.n	8004284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d115      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07f      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b41      	ldr	r3, [pc, #260]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e073      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06b      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4936      	ldr	r1, [pc, #216]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fe fb92 	bl	800297c <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fe fb8e 	bl	800297c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e053      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b27      	ldr	r3, [pc, #156]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d210      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 0207 	bic.w	r2, r3, #7
 800429a:	4922      	ldr	r1, [pc, #136]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e032      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4916      	ldr	r1, [pc, #88]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	490e      	ldr	r1, [pc, #56]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f2:	f000 f821 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	490a      	ldr	r1, [pc, #40]	; (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1cc>)
 800430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_ClockConfig+0x1d0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe faf0 	bl	80028f8 <HAL_InitTick>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40022000 	.word	0x40022000
 8004328:	40021000 	.word	0x40021000
 800432c:	08006b70 	.word	0x08006b70
 8004330:	20000008 	.word	0x20000008
 8004334:	2000000c 	.word	0x2000000c

08004338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	b490      	push	{r4, r7}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004340:	1d3c      	adds	r4, r7, #4
 8004342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004348:	f240 2301 	movw	r3, #513	; 0x201
 800434c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	2300      	movs	r3, #0
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004362:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b04      	cmp	r3, #4
 8004370:	d002      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x40>
 8004372:	2b08      	cmp	r3, #8
 8004374:	d003      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x46>
 8004376:	e02b      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800437a:	623b      	str	r3, [r7, #32]
      break;
 800437c:	e02b      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	0c9b      	lsrs	r3, r3, #18
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	3328      	adds	r3, #40	; 0x28
 8004388:	443b      	add	r3, r7
 800438a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800438e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d012      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	0c5b      	lsrs	r3, r3, #17
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	3328      	adds	r3, #40	; 0x28
 80043a6:	443b      	add	r3, r7
 80043a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80043b2:	fb03 f202 	mul.w	r2, r3, r2
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	e004      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c4:	fb02 f303 	mul.w	r3, r2, r3
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	623b      	str	r3, [r7, #32]
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80043d2:	623b      	str	r3, [r7, #32]
      break;
 80043d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d6:	6a3b      	ldr	r3, [r7, #32]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc90      	pop	{r4, r7}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	08006ae0 	.word	0x08006ae0
 80043e8:	40021000 	.word	0x40021000
 80043ec:	007a1200 	.word	0x007a1200
 80043f0:	003d0900 	.word	0x003d0900

080043f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b02      	ldr	r3, [pc, #8]	; (8004404 <HAL_RCC_GetHCLKFreq+0x10>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	20000008 	.word	0x20000008

08004408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800440c:	f7ff fff2 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4903      	ldr	r1, [pc, #12]	; (800442c <HAL_RCC_GetPCLK1Freq+0x24>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	08006b80 	.word	0x08006b80

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004434:	f7ff ffde 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	0adb      	lsrs	r3, r3, #11
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4903      	ldr	r1, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000
 8004454:	08006b80 	.word	0x08006b80

08004458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <RCC_Delay+0x34>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <RCC_Delay+0x38>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	0a5b      	lsrs	r3, r3, #9
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004474:	bf00      	nop
  }
  while (Delay --);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1e5a      	subs	r2, r3, #1
 800447a:	60fa      	str	r2, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f9      	bne.n	8004474 <RCC_Delay+0x1c>
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	20000008 	.word	0x20000008
 8004490:	10624dd3 	.word	0x10624dd3

08004494 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d07d      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044b0:	2300      	movs	r3, #0
 80044b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b4:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10d      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b4c      	ldr	r3, [pc, #304]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	4a4b      	ldr	r2, [pc, #300]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	61d3      	str	r3, [r2, #28]
 80044cc:	4b49      	ldr	r3, [pc, #292]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044dc:	4b46      	ldr	r3, [pc, #280]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d118      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e8:	4b43      	ldr	r3, [pc, #268]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a42      	ldr	r2, [pc, #264]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f4:	f7fe fa42 	bl	800297c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	e008      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fc:	f7fe fa3e 	bl	800297c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e06d      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	4b3a      	ldr	r3, [pc, #232]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800451a:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d02e      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	429a      	cmp	r2, r3
 8004536:	d027      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004538:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004540:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800454e:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d014      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455e:	f7fe fa0d 	bl	800297c <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004564:	e00a      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fe fa09 	bl	800297c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f241 3288 	movw	r2, #5000	; 0x1388
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e036      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457c:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ee      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4917      	ldr	r1, [pc, #92]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	4313      	orrs	r3, r2
 8004598:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a0:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	490b      	ldr	r1, [pc, #44]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045d6:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	4904      	ldr	r1, [pc, #16]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42420440 	.word	0x42420440

08004600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e041      	b.n	8004696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd ffa6 	bl	8002578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f000 fc20 	bl	8004e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d001      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e03a      	b.n	800472e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_TIM_Base_Start_IT+0x98>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x58>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x58>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a14      	ldr	r2, [pc, #80]	; (800473c <HAL_TIM_Base_Start_IT+0x9c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x58>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a13      	ldr	r2, [pc, #76]	; (8004740 <HAL_TIM_Base_Start_IT+0xa0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d111      	bne.n	800471c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b06      	cmp	r3, #6
 8004708:	d010      	beq.n	800472c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	e007      	b.n	800472c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	40012c00 	.word	0x40012c00
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800

08004744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e041      	b.n	80047da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd ff28 	bl	80025c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 fb7e 	bl	8004e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_TIM_PWM_Start+0x24>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e022      	b.n	800484e <HAL_TIM_PWM_Start+0x6a>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d109      	bne.n	8004822 <HAL_TIM_PWM_Start+0x3e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	bf14      	ite	ne
 800481a:	2301      	movne	r3, #1
 800481c:	2300      	moveq	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e015      	b.n	800484e <HAL_TIM_PWM_Start+0x6a>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d109      	bne.n	800483c <HAL_TIM_PWM_Start+0x58>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e008      	b.n	800484e <HAL_TIM_PWM_Start+0x6a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e05e      	b.n	8004914 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start+0x82>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004864:	e013      	b.n	800488e <HAL_TIM_PWM_Start+0xaa>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b04      	cmp	r3, #4
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0x92>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004874:	e00b      	b.n	800488e <HAL_TIM_PWM_Start+0xaa>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0xa2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004884:	e003      	b.n	800488e <HAL_TIM_PWM_Start+0xaa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	6839      	ldr	r1, [r7, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fd74 	bl	8005384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1e      	ldr	r2, [pc, #120]	; (800491c <HAL_TIM_PWM_Start+0x138>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d107      	bne.n	80048b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a18      	ldr	r2, [pc, #96]	; (800491c <HAL_TIM_PWM_Start+0x138>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIM_PWM_Start+0xfa>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c8:	d009      	beq.n	80048de <HAL_TIM_PWM_Start+0xfa>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a14      	ldr	r2, [pc, #80]	; (8004920 <HAL_TIM_PWM_Start+0x13c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIM_PWM_Start+0xfa>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a12      	ldr	r2, [pc, #72]	; (8004924 <HAL_TIM_PWM_Start+0x140>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d111      	bne.n	8004902 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	d010      	beq.n	8004912 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004900:	e007      	b.n	8004912 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800

08004928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b02      	cmp	r3, #2
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b02      	cmp	r3, #2
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0202 	mvn.w	r2, #2
 8004954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa6f 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa62 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fa71 	bl	8004e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0204 	mvn.w	r2, #4
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa45 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa38 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fa47 	bl	8004e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0208 	mvn.w	r2, #8
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa1b 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa0e 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fa1d 	bl	8004e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0210 	mvn.w	r2, #16
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2208      	movs	r2, #8
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9f1 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9e4 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f9f3 	bl	8004e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0201 	mvn.w	r2, #1
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd fbaa 	bl	8002200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b80      	cmp	r3, #128	; 0x80
 8004ab8:	d10e      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac4:	2b80      	cmp	r3, #128	; 0x80
 8004ac6:	d107      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fce1 	bl	800549a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b40      	cmp	r3, #64	; 0x40
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9b7 	bl	8004e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d107      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0220 	mvn.w	r2, #32
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fcac 	bl	8005488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e0ac      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x174>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	f200 809f 	bhi.w	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004b62:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004b9d 	.word	0x08004b9d
 8004b6c:	08004ca1 	.word	0x08004ca1
 8004b70:	08004ca1 	.word	0x08004ca1
 8004b74:	08004ca1 	.word	0x08004ca1
 8004b78:	08004bdd 	.word	0x08004bdd
 8004b7c:	08004ca1 	.word	0x08004ca1
 8004b80:	08004ca1 	.word	0x08004ca1
 8004b84:	08004ca1 	.word	0x08004ca1
 8004b88:	08004c1f 	.word	0x08004c1f
 8004b8c:	08004ca1 	.word	0x08004ca1
 8004b90:	08004ca1 	.word	0x08004ca1
 8004b94:	08004ca1 	.word	0x08004ca1
 8004b98:	08004c5f 	.word	0x08004c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f9d0 	bl	8004f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0208 	orr.w	r2, r2, #8
 8004bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0204 	bic.w	r2, r2, #4
 8004bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6999      	ldr	r1, [r3, #24]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	619a      	str	r2, [r3, #24]
      break;
 8004bda:	e062      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fa16 	bl	8005014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6999      	ldr	r1, [r3, #24]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	021a      	lsls	r2, r3, #8
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	619a      	str	r2, [r3, #24]
      break;
 8004c1c:	e041      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fa5f 	bl	80050e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0208 	orr.w	r2, r2, #8
 8004c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0204 	bic.w	r2, r2, #4
 8004c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69d9      	ldr	r1, [r3, #28]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	61da      	str	r2, [r3, #28]
      break;
 8004c5c:	e021      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 faa9 	bl	80051bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69d9      	ldr	r1, [r3, #28]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	021a      	lsls	r2, r3, #8
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	61da      	str	r2, [r3, #28]
      break;
 8004c9e:	e000      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x18>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e0b3      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x180>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d04:	d03e      	beq.n	8004d84 <HAL_TIM_ConfigClockSource+0xd0>
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0a:	f200 8087 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x168>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	f000 8085 	beq.w	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	d87f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x168>
 8004d1c:	2b70      	cmp	r3, #112	; 0x70
 8004d1e:	d01a      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0xa2>
 8004d20:	2b70      	cmp	r3, #112	; 0x70
 8004d22:	d87b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x168>
 8004d24:	2b60      	cmp	r3, #96	; 0x60
 8004d26:	d050      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x116>
 8004d28:	2b60      	cmp	r3, #96	; 0x60
 8004d2a:	d877      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x168>
 8004d2c:	2b50      	cmp	r3, #80	; 0x50
 8004d2e:	d03c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0xf6>
 8004d30:	2b50      	cmp	r3, #80	; 0x50
 8004d32:	d873      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x168>
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d058      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x136>
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d86f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x168>
 8004d3c:	2b30      	cmp	r3, #48	; 0x30
 8004d3e:	d064      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x156>
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d86b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x168>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d060      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x156>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d867      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x168>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05c      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x156>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d05a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d54:	e062      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6899      	ldr	r1, [r3, #8]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f000 faee 	bl	8005346 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	609a      	str	r2, [r3, #8]
      break;
 8004d82:	e04e      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	6899      	ldr	r1, [r3, #8]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f000 fad7 	bl	8005346 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da6:	609a      	str	r2, [r3, #8]
      break;
 8004da8:	e03b      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 fa4e 	bl	8005258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2150      	movs	r1, #80	; 0x50
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 faa5 	bl	8005312 <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e02b      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fa6c 	bl	80052b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2160      	movs	r1, #96	; 0x60
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fa95 	bl	8005312 <TIM_ITRx_SetConfig>
      break;
 8004de8:	e01b      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fa2e 	bl	8005258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2140      	movs	r1, #64	; 0x40
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fa85 	bl	8005312 <TIM_ITRx_SetConfig>
      break;
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 fa7c 	bl	8005312 <TIM_ITRx_SetConfig>
        break;
 8004e1a:	e002      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a29      	ldr	r2, [pc, #164]	; (8004f3c <TIM_Base_SetConfig+0xb8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <TIM_Base_SetConfig+0x30>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea2:	d007      	beq.n	8004eb4 <TIM_Base_SetConfig+0x30>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a26      	ldr	r2, [pc, #152]	; (8004f40 <TIM_Base_SetConfig+0xbc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0x30>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <TIM_Base_SetConfig+0xc0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d108      	bne.n	8004ec6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <TIM_Base_SetConfig+0xb8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00b      	beq.n	8004ee6 <TIM_Base_SetConfig+0x62>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d007      	beq.n	8004ee6 <TIM_Base_SetConfig+0x62>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <TIM_Base_SetConfig+0xbc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_Base_SetConfig+0x62>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <TIM_Base_SetConfig+0xc0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <TIM_Base_SetConfig+0xb8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d103      	bne.n	8004f2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	615a      	str	r2, [r3, #20]
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800

08004f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0201 	bic.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 0302 	bic.w	r3, r3, #2
 8004f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a1c      	ldr	r2, [pc, #112]	; (8005010 <TIM_OC1_SetConfig+0xc8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d10c      	bne.n	8004fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0308 	bic.w	r3, r3, #8
 8004faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 0304 	bic.w	r3, r3, #4
 8004fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a13      	ldr	r2, [pc, #76]	; (8005010 <TIM_OC1_SetConfig+0xc8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d111      	bne.n	8004fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	621a      	str	r2, [r3, #32]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40012c00 	.word	0x40012c00

08005014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0210 	bic.w	r2, r3, #16
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <TIM_OC2_SetConfig+0xd0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10d      	bne.n	8005090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <TIM_OC2_SetConfig+0xd0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d113      	bne.n	80050c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800509e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	40012c00 	.word	0x40012c00

080050e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0303 	bic.w	r3, r3, #3
 800511e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <TIM_OC3_SetConfig+0xd0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10d      	bne.n	8005162 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800514c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <TIM_OC3_SetConfig+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d113      	bne.n	8005192 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40012c00 	.word	0x40012c00

080051bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <TIM_OC4_SetConfig+0x98>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d109      	bne.n	8005230 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr
 8005254:	40012c00 	.word	0x40012c00

08005258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 030a 	bic.w	r3, r3, #10
 8005294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr

080052b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f023 0210 	bic.w	r2, r3, #16
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	031b      	lsls	r3, r3, #12
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	f043 0307 	orr.w	r3, r3, #7
 8005334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005360:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	021a      	lsls	r2, r3, #8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	431a      	orrs	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4313      	orrs	r3, r2
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	609a      	str	r2, [r3, #8]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	2201      	movs	r2, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	401a      	ands	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1a      	ldr	r2, [r3, #32]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e046      	b.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a16      	ldr	r2, [pc, #88]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d009      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a12      	ldr	r2, [pc, #72]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a10      	ldr	r2, [pc, #64]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d10c      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4313      	orrs	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800

08005488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e03f      	b.n	800553e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fd f892 	bl	80025fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2224      	movs	r2, #36	; 0x24
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fd7f 	bl	8005ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695a      	ldr	r2, [r3, #20]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b08a      	sub	sp, #40	; 0x28
 800554a:	af02      	add	r7, sp, #8
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b20      	cmp	r3, #32
 8005564:	d17c      	bne.n	8005660 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_UART_Transmit+0x2c>
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e075      	b.n	8005662 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_UART_Transmit+0x3e>
 8005580:	2302      	movs	r3, #2
 8005582:	e06e      	b.n	8005662 <HAL_UART_Transmit+0x11c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2221      	movs	r2, #33	; 0x21
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559a:	f7fd f9ef 	bl	800297c <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b4:	d108      	bne.n	80055c8 <HAL_UART_Transmit+0x82>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e003      	b.n	80055d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055d8:	e02a      	b.n	8005630 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2180      	movs	r1, #128	; 0x80
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 faf1 	bl	8005bcc <UART_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e036      	b.n	8005662 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	3302      	adds	r3, #2
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e007      	b.n	8005622 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	3301      	adds	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1cf      	bne.n	80055da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2140      	movs	r1, #64	; 0x40
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fac1 	bl	8005bcc <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	4613      	mov	r3, r2
 8005676:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b20      	cmp	r3, #32
 8005682:	d11d      	bne.n	80056c0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UART_Receive_DMA+0x26>
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e016      	b.n	80056c2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Receive_DMA+0x38>
 800569e:	2302      	movs	r3, #2
 80056a0:	e00f      	b.n	80056c2 <HAL_UART_Receive_DMA+0x58>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fad2 	bl	8005c60 <UART_Start_Receive_DMA>
 80056bc:	4603      	mov	r3, r0
 80056be:	e000      	b.n	80056c2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10d      	bne.n	800571e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_UART_IRQHandler+0x52>
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fbc2 	bl	8005ea0 <UART_Receive_IT>
      return;
 800571c:	e17b      	b.n	8005a16 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80b1 	beq.w	8005888 <HAL_UART_IRQHandler+0x1bc>
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <HAL_UART_IRQHandler+0x70>
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80a6 	beq.w	8005888 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_UART_IRQHandler+0x90>
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f043 0201 	orr.w	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_UART_IRQHandler+0xb0>
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	f043 0202 	orr.w	r2, r3, #2
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_UART_IRQHandler+0xd0>
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	f043 0204 	orr.w	r2, r3, #4
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00f      	beq.n	80057c6 <HAL_UART_IRQHandler+0xfa>
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_UART_IRQHandler+0xee>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0208 	orr.w	r2, r3, #8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 811e 	beq.w	8005a0c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <HAL_UART_IRQHandler+0x11e>
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb5b 	bl	8005ea0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <HAL_UART_IRQHandler+0x146>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d031      	beq.n	8005876 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa9d 	bl	8005d52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d023      	beq.n	800586e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005834:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	2b00      	cmp	r3, #0
 800583c:	d013      	beq.n	8005866 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	4a76      	ldr	r2, [pc, #472]	; (8005a1c <HAL_UART_IRQHandler+0x350>)
 8005844:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	4618      	mov	r0, r3
 800584c:	f7fd fe92 	bl	8003574 <HAL_DMA_Abort_IT>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d016      	beq.n	8005884 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005860:	4610      	mov	r0, r2
 8005862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	e00e      	b.n	8005884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8ec 	bl	8005a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	e00a      	b.n	8005884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8e8 	bl	8005a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	e006      	b.n	8005884 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8e4 	bl	8005a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005882:	e0c3      	b.n	8005a0c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	bf00      	nop
    return;
 8005886:	e0c1      	b.n	8005a0c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	2b01      	cmp	r3, #1
 800588e:	f040 80a1 	bne.w	80059d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 809b 	beq.w	80059d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8095 	beq.w	80059d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d04e      	beq.n	800596c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80058d8:	8a3b      	ldrh	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8098 	beq.w	8005a10 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058e4:	8a3a      	ldrh	r2, [r7, #16]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	f080 8092 	bcs.w	8005a10 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8a3a      	ldrh	r2, [r7, #16]
 80058f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d02b      	beq.n	8005954 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800590a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800592a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0210 	bic.w	r2, r2, #16
 8005948:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	4618      	mov	r0, r3
 8005950:	f7fd fdd5 	bl	80034fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800595c:	b29b      	uxth	r3, r3
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	b29b      	uxth	r3, r3
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f876 	bl	8005a56 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800596a:	e051      	b.n	8005a10 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005974:	b29b      	uxth	r3, r3
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d047      	beq.n	8005a14 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005984:	8a7b      	ldrh	r3, [r7, #18]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d044      	beq.n	8005a14 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005998:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0210 	bic.w	r2, r2, #16
 80059c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059c8:	8a7b      	ldrh	r3, [r7, #18]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f842 	bl	8005a56 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80059d2:	e01f      	b.n	8005a14 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_UART_IRQHandler+0x324>
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f9f2 	bl	8005dd2 <UART_Transmit_IT>
    return;
 80059ee:	e012      	b.n	8005a16 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <HAL_UART_IRQHandler+0x34a>
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa33 	bl	8005e70 <UART_EndTransmit_IT>
    return;
 8005a0a:	e004      	b.n	8005a16 <HAL_UART_IRQHandler+0x34a>
    return;
 8005a0c:	bf00      	nop
 8005a0e:	e002      	b.n	8005a16 <HAL_UART_IRQHandler+0x34a>
      return;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <HAL_UART_IRQHandler+0x34a>
      return;
 8005a14:	bf00      	nop
  }
}
 8005a16:	3728      	adds	r7, #40	; 0x28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	08005dab 	.word	0x08005dab

08005a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d12a      	bne.n	8005ade <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a9c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0201 	bic.w	r2, r2, #1
 8005aac:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695a      	ldr	r2, [r3, #20]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d107      	bne.n	8005ade <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0210 	bic.w	r2, r2, #16
 8005adc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d106      	bne.n	8005af4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aea:	4619      	mov	r1, r3
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff ffb2 	bl	8005a56 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005af2:	e002      	b.n	8005afa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7fc fb0b 	bl	8002110 <HAL_UART_RxCpltCallback>
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d108      	bne.n	8005b2a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	4619      	mov	r1, r3
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff ff97 	bl	8005a56 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b28:	e002      	b.n	8005b30 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff ff81 	bl	8005a32 <HAL_UART_RxHalfCpltCallback>
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b21      	cmp	r3, #33	; 0x21
 8005b6a:	d108      	bne.n	8005b7e <UART_DMAError+0x46>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2200      	movs	r2, #0
 8005b76:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b78:	68b8      	ldr	r0, [r7, #8]
 8005b7a:	f000 f8d5 	bl	8005d28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf14      	ite	ne
 8005b8c:	2301      	movne	r3, #1
 8005b8e:	2300      	moveq	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b22      	cmp	r3, #34	; 0x22
 8005b9e:	d108      	bne.n	8005bb2 <UART_DMAError+0x7a>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005bac:	68b8      	ldr	r0, [r7, #8]
 8005bae:	f000 f8d0 	bl	8005d52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f043 0210 	orr.w	r2, r3, #16
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bbe:	68b8      	ldr	r0, [r7, #8]
 8005bc0:	f7ff ff40 	bl	8005a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bdc:	e02c      	b.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d028      	beq.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005bec:	f7fc fec6 	bl	800297c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d21d      	bcs.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0201 	bic.w	r2, r2, #1
 8005c1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e00f      	b.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4013      	ands	r3, r2
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	bf0c      	ite	eq
 8005c48:	2301      	moveq	r3, #1
 8005c4a:	2300      	movne	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d0c3      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	88fa      	ldrh	r2, [r7, #6]
 8005c78:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2222      	movs	r2, #34	; 0x22
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <UART_Start_Receive_DMA+0xbc>)
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <UART_Start_Receive_DMA+0xc0>)
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <UART_Start_Receive_DMA+0xc4>)
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	f7fd fbbe 	bl	8003440 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d10:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	08005a6d 	.word	0x08005a6d
 8005d20:	08005b03 	.word	0x08005b03
 8005d24:	08005b39 	.word	0x08005b39

08005d28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d3e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr

08005d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0210 	bic.w	r2, r2, #16
 8005d90:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr

08005daa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff fe3d 	bl	8005a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b21      	cmp	r3, #33	; 0x21
 8005de4:	d13e      	bne.n	8005e64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dee:	d114      	bne.n	8005e1a <UART_Transmit_IT+0x48>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d110      	bne.n	8005e1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	1c9a      	adds	r2, r3, #2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	621a      	str	r2, [r3, #32]
 8005e18:	e008      	b.n	8005e2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	1c59      	adds	r1, r3, #1
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6211      	str	r1, [r2, #32]
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10f      	bne.n	8005e60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e000      	b.n	8005e66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
  }
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fdc5 	bl	8005a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b22      	cmp	r3, #34	; 0x22
 8005eb2:	f040 8099 	bne.w	8005fe8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d117      	bne.n	8005ef0 <UART_Receive_IT+0x50>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d113      	bne.n	8005ef0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
 8005eee:	e026      	b.n	8005f3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f02:	d007      	beq.n	8005f14 <UART_Receive_IT+0x74>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <UART_Receive_IT+0x82>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e008      	b.n	8005f34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d148      	bne.n	8005fe4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0220 	bic.w	r2, r2, #32
 8005f60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d123      	bne.n	8005fda <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0210 	bic.w	r2, r2, #16
 8005fa6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d10a      	bne.n	8005fcc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fd3f 	bl	8005a56 <HAL_UARTEx_RxEventCallback>
 8005fd8:	e002      	b.n	8005fe0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fc f898 	bl	8002110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e002      	b.n	8005fea <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e000      	b.n	8005fea <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800602e:	f023 030c 	bic.w	r3, r3, #12
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6812      	ldr	r2, [r2, #0]
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	430b      	orrs	r3, r1
 800603a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <UART_SetConfig+0x114>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d103      	bne.n	8006064 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800605c:	f7fe f9e8 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	e002      	b.n	800606a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006064:	f7fe f9d0 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8006068:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	009a      	lsls	r2, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006080:	4a22      	ldr	r2, [pc, #136]	; (800610c <UART_SetConfig+0x118>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	0119      	lsls	r1, r3, #4
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009a      	lsls	r2, r3, #2
 8006094:	441a      	add	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <UART_SetConfig+0x118>)
 80060a2:	fba3 0302 	umull	r0, r3, r3, r2
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	2064      	movs	r0, #100	; 0x64
 80060aa:	fb00 f303 	mul.w	r3, r0, r3
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	3332      	adds	r3, #50	; 0x32
 80060b4:	4a15      	ldr	r2, [pc, #84]	; (800610c <UART_SetConfig+0x118>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c0:	4419      	add	r1, r3
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009a      	lsls	r2, r3, #2
 80060cc:	441a      	add	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <UART_SetConfig+0x118>)
 80060da:	fba3 0302 	umull	r0, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	2064      	movs	r0, #100	; 0x64
 80060e2:	fb00 f303 	mul.w	r3, r0, r3
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	3332      	adds	r3, #50	; 0x32
 80060ec:	4a07      	ldr	r2, [pc, #28]	; (800610c <UART_SetConfig+0x118>)
 80060ee:	fba2 2303 	umull	r2, r3, r2, r3
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	f003 020f 	and.w	r2, r3, #15
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	440a      	add	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40013800 	.word	0x40013800
 800610c:	51eb851f 	.word	0x51eb851f

08006110 <__errno>:
 8006110:	4b01      	ldr	r3, [pc, #4]	; (8006118 <__errno+0x8>)
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	20000014 	.word	0x20000014

0800611c <__libc_init_array>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	2600      	movs	r6, #0
 8006120:	4d0c      	ldr	r5, [pc, #48]	; (8006154 <__libc_init_array+0x38>)
 8006122:	4c0d      	ldr	r4, [pc, #52]	; (8006158 <__libc_init_array+0x3c>)
 8006124:	1b64      	subs	r4, r4, r5
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	42a6      	cmp	r6, r4
 800612a:	d109      	bne.n	8006140 <__libc_init_array+0x24>
 800612c:	f000 fc9c 	bl	8006a68 <_init>
 8006130:	2600      	movs	r6, #0
 8006132:	4d0a      	ldr	r5, [pc, #40]	; (800615c <__libc_init_array+0x40>)
 8006134:	4c0a      	ldr	r4, [pc, #40]	; (8006160 <__libc_init_array+0x44>)
 8006136:	1b64      	subs	r4, r4, r5
 8006138:	10a4      	asrs	r4, r4, #2
 800613a:	42a6      	cmp	r6, r4
 800613c:	d105      	bne.n	800614a <__libc_init_array+0x2e>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	f855 3b04 	ldr.w	r3, [r5], #4
 8006144:	4798      	blx	r3
 8006146:	3601      	adds	r6, #1
 8006148:	e7ee      	b.n	8006128 <__libc_init_array+0xc>
 800614a:	f855 3b04 	ldr.w	r3, [r5], #4
 800614e:	4798      	blx	r3
 8006150:	3601      	adds	r6, #1
 8006152:	e7f2      	b.n	800613a <__libc_init_array+0x1e>
 8006154:	08006bbc 	.word	0x08006bbc
 8006158:	08006bbc 	.word	0x08006bbc
 800615c:	08006bbc 	.word	0x08006bbc
 8006160:	08006bc0 	.word	0x08006bc0

08006164 <memset>:
 8006164:	4603      	mov	r3, r0
 8006166:	4402      	add	r2, r0
 8006168:	4293      	cmp	r3, r2
 800616a:	d100      	bne.n	800616e <memset+0xa>
 800616c:	4770      	bx	lr
 800616e:	f803 1b01 	strb.w	r1, [r3], #1
 8006172:	e7f9      	b.n	8006168 <memset+0x4>

08006174 <siprintf>:
 8006174:	b40e      	push	{r1, r2, r3}
 8006176:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800617a:	b500      	push	{lr}
 800617c:	b09c      	sub	sp, #112	; 0x70
 800617e:	ab1d      	add	r3, sp, #116	; 0x74
 8006180:	9002      	str	r0, [sp, #8]
 8006182:	9006      	str	r0, [sp, #24]
 8006184:	9107      	str	r1, [sp, #28]
 8006186:	9104      	str	r1, [sp, #16]
 8006188:	4808      	ldr	r0, [pc, #32]	; (80061ac <siprintf+0x38>)
 800618a:	4909      	ldr	r1, [pc, #36]	; (80061b0 <siprintf+0x3c>)
 800618c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006190:	9105      	str	r1, [sp, #20]
 8006192:	6800      	ldr	r0, [r0, #0]
 8006194:	a902      	add	r1, sp, #8
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f000 f868 	bl	800626c <_svfiprintf_r>
 800619c:	2200      	movs	r2, #0
 800619e:	9b02      	ldr	r3, [sp, #8]
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	b01c      	add	sp, #112	; 0x70
 80061a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a8:	b003      	add	sp, #12
 80061aa:	4770      	bx	lr
 80061ac:	20000014 	.word	0x20000014
 80061b0:	ffff0208 	.word	0xffff0208

080061b4 <__ssputs_r>:
 80061b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	688e      	ldr	r6, [r1, #8]
 80061ba:	4682      	mov	sl, r0
 80061bc:	429e      	cmp	r6, r3
 80061be:	460c      	mov	r4, r1
 80061c0:	4690      	mov	r8, r2
 80061c2:	461f      	mov	r7, r3
 80061c4:	d838      	bhi.n	8006238 <__ssputs_r+0x84>
 80061c6:	898a      	ldrh	r2, [r1, #12]
 80061c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061cc:	d032      	beq.n	8006234 <__ssputs_r+0x80>
 80061ce:	6825      	ldr	r5, [r4, #0]
 80061d0:	6909      	ldr	r1, [r1, #16]
 80061d2:	3301      	adds	r3, #1
 80061d4:	eba5 0901 	sub.w	r9, r5, r1
 80061d8:	6965      	ldr	r5, [r4, #20]
 80061da:	444b      	add	r3, r9
 80061dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061e4:	106d      	asrs	r5, r5, #1
 80061e6:	429d      	cmp	r5, r3
 80061e8:	bf38      	it	cc
 80061ea:	461d      	movcc	r5, r3
 80061ec:	0553      	lsls	r3, r2, #21
 80061ee:	d531      	bpl.n	8006254 <__ssputs_r+0xa0>
 80061f0:	4629      	mov	r1, r5
 80061f2:	f000 fb6f 	bl	80068d4 <_malloc_r>
 80061f6:	4606      	mov	r6, r0
 80061f8:	b950      	cbnz	r0, 8006210 <__ssputs_r+0x5c>
 80061fa:	230c      	movs	r3, #12
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006200:	f8ca 3000 	str.w	r3, [sl]
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	464a      	mov	r2, r9
 8006212:	6921      	ldr	r1, [r4, #16]
 8006214:	f000 face 	bl	80067b4 <memcpy>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800621e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	6126      	str	r6, [r4, #16]
 8006226:	444e      	add	r6, r9
 8006228:	6026      	str	r6, [r4, #0]
 800622a:	463e      	mov	r6, r7
 800622c:	6165      	str	r5, [r4, #20]
 800622e:	eba5 0509 	sub.w	r5, r5, r9
 8006232:	60a5      	str	r5, [r4, #8]
 8006234:	42be      	cmp	r6, r7
 8006236:	d900      	bls.n	800623a <__ssputs_r+0x86>
 8006238:	463e      	mov	r6, r7
 800623a:	4632      	mov	r2, r6
 800623c:	4641      	mov	r1, r8
 800623e:	6820      	ldr	r0, [r4, #0]
 8006240:	f000 fac6 	bl	80067d0 <memmove>
 8006244:	68a3      	ldr	r3, [r4, #8]
 8006246:	2000      	movs	r0, #0
 8006248:	1b9b      	subs	r3, r3, r6
 800624a:	60a3      	str	r3, [r4, #8]
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	4433      	add	r3, r6
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	e7db      	b.n	800620c <__ssputs_r+0x58>
 8006254:	462a      	mov	r2, r5
 8006256:	f000 fbb1 	bl	80069bc <_realloc_r>
 800625a:	4606      	mov	r6, r0
 800625c:	2800      	cmp	r0, #0
 800625e:	d1e1      	bne.n	8006224 <__ssputs_r+0x70>
 8006260:	4650      	mov	r0, sl
 8006262:	6921      	ldr	r1, [r4, #16]
 8006264:	f000 face 	bl	8006804 <_free_r>
 8006268:	e7c7      	b.n	80061fa <__ssputs_r+0x46>
	...

0800626c <_svfiprintf_r>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	4698      	mov	r8, r3
 8006272:	898b      	ldrh	r3, [r1, #12]
 8006274:	4607      	mov	r7, r0
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	460d      	mov	r5, r1
 800627a:	4614      	mov	r4, r2
 800627c:	b09d      	sub	sp, #116	; 0x74
 800627e:	d50e      	bpl.n	800629e <_svfiprintf_r+0x32>
 8006280:	690b      	ldr	r3, [r1, #16]
 8006282:	b963      	cbnz	r3, 800629e <_svfiprintf_r+0x32>
 8006284:	2140      	movs	r1, #64	; 0x40
 8006286:	f000 fb25 	bl	80068d4 <_malloc_r>
 800628a:	6028      	str	r0, [r5, #0]
 800628c:	6128      	str	r0, [r5, #16]
 800628e:	b920      	cbnz	r0, 800629a <_svfiprintf_r+0x2e>
 8006290:	230c      	movs	r3, #12
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	e0d1      	b.n	800643e <_svfiprintf_r+0x1d2>
 800629a:	2340      	movs	r3, #64	; 0x40
 800629c:	616b      	str	r3, [r5, #20]
 800629e:	2300      	movs	r3, #0
 80062a0:	9309      	str	r3, [sp, #36]	; 0x24
 80062a2:	2320      	movs	r3, #32
 80062a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062a8:	2330      	movs	r3, #48	; 0x30
 80062aa:	f04f 0901 	mov.w	r9, #1
 80062ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80062b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006458 <_svfiprintf_r+0x1ec>
 80062b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ba:	4623      	mov	r3, r4
 80062bc:	469a      	mov	sl, r3
 80062be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c2:	b10a      	cbz	r2, 80062c8 <_svfiprintf_r+0x5c>
 80062c4:	2a25      	cmp	r2, #37	; 0x25
 80062c6:	d1f9      	bne.n	80062bc <_svfiprintf_r+0x50>
 80062c8:	ebba 0b04 	subs.w	fp, sl, r4
 80062cc:	d00b      	beq.n	80062e6 <_svfiprintf_r+0x7a>
 80062ce:	465b      	mov	r3, fp
 80062d0:	4622      	mov	r2, r4
 80062d2:	4629      	mov	r1, r5
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ff6d 	bl	80061b4 <__ssputs_r>
 80062da:	3001      	adds	r0, #1
 80062dc:	f000 80aa 	beq.w	8006434 <_svfiprintf_r+0x1c8>
 80062e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e2:	445a      	add	r2, fp
 80062e4:	9209      	str	r2, [sp, #36]	; 0x24
 80062e6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80a2 	beq.w	8006434 <_svfiprintf_r+0x1c8>
 80062f0:	2300      	movs	r3, #0
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295
 80062f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062fa:	f10a 0a01 	add.w	sl, sl, #1
 80062fe:	9304      	str	r3, [sp, #16]
 8006300:	9307      	str	r3, [sp, #28]
 8006302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006306:	931a      	str	r3, [sp, #104]	; 0x68
 8006308:	4654      	mov	r4, sl
 800630a:	2205      	movs	r2, #5
 800630c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006310:	4851      	ldr	r0, [pc, #324]	; (8006458 <_svfiprintf_r+0x1ec>)
 8006312:	f000 fa41 	bl	8006798 <memchr>
 8006316:	9a04      	ldr	r2, [sp, #16]
 8006318:	b9d8      	cbnz	r0, 8006352 <_svfiprintf_r+0xe6>
 800631a:	06d0      	lsls	r0, r2, #27
 800631c:	bf44      	itt	mi
 800631e:	2320      	movmi	r3, #32
 8006320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006324:	0711      	lsls	r1, r2, #28
 8006326:	bf44      	itt	mi
 8006328:	232b      	movmi	r3, #43	; 0x2b
 800632a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800632e:	f89a 3000 	ldrb.w	r3, [sl]
 8006332:	2b2a      	cmp	r3, #42	; 0x2a
 8006334:	d015      	beq.n	8006362 <_svfiprintf_r+0xf6>
 8006336:	4654      	mov	r4, sl
 8006338:	2000      	movs	r0, #0
 800633a:	f04f 0c0a 	mov.w	ip, #10
 800633e:	9a07      	ldr	r2, [sp, #28]
 8006340:	4621      	mov	r1, r4
 8006342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006346:	3b30      	subs	r3, #48	; 0x30
 8006348:	2b09      	cmp	r3, #9
 800634a:	d94e      	bls.n	80063ea <_svfiprintf_r+0x17e>
 800634c:	b1b0      	cbz	r0, 800637c <_svfiprintf_r+0x110>
 800634e:	9207      	str	r2, [sp, #28]
 8006350:	e014      	b.n	800637c <_svfiprintf_r+0x110>
 8006352:	eba0 0308 	sub.w	r3, r0, r8
 8006356:	fa09 f303 	lsl.w	r3, r9, r3
 800635a:	4313      	orrs	r3, r2
 800635c:	46a2      	mov	sl, r4
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	e7d2      	b.n	8006308 <_svfiprintf_r+0x9c>
 8006362:	9b03      	ldr	r3, [sp, #12]
 8006364:	1d19      	adds	r1, r3, #4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	9103      	str	r1, [sp, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfbb      	ittet	lt
 800636e:	425b      	neglt	r3, r3
 8006370:	f042 0202 	orrlt.w	r2, r2, #2
 8006374:	9307      	strge	r3, [sp, #28]
 8006376:	9307      	strlt	r3, [sp, #28]
 8006378:	bfb8      	it	lt
 800637a:	9204      	strlt	r2, [sp, #16]
 800637c:	7823      	ldrb	r3, [r4, #0]
 800637e:	2b2e      	cmp	r3, #46	; 0x2e
 8006380:	d10c      	bne.n	800639c <_svfiprintf_r+0x130>
 8006382:	7863      	ldrb	r3, [r4, #1]
 8006384:	2b2a      	cmp	r3, #42	; 0x2a
 8006386:	d135      	bne.n	80063f4 <_svfiprintf_r+0x188>
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	3402      	adds	r4, #2
 800638c:	1d1a      	adds	r2, r3, #4
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	9203      	str	r2, [sp, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	bfb8      	it	lt
 8006396:	f04f 33ff 	movlt.w	r3, #4294967295
 800639a:	9305      	str	r3, [sp, #20]
 800639c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800645c <_svfiprintf_r+0x1f0>
 80063a0:	2203      	movs	r2, #3
 80063a2:	4650      	mov	r0, sl
 80063a4:	7821      	ldrb	r1, [r4, #0]
 80063a6:	f000 f9f7 	bl	8006798 <memchr>
 80063aa:	b140      	cbz	r0, 80063be <_svfiprintf_r+0x152>
 80063ac:	2340      	movs	r3, #64	; 0x40
 80063ae:	eba0 000a 	sub.w	r0, r0, sl
 80063b2:	fa03 f000 	lsl.w	r0, r3, r0
 80063b6:	9b04      	ldr	r3, [sp, #16]
 80063b8:	3401      	adds	r4, #1
 80063ba:	4303      	orrs	r3, r0
 80063bc:	9304      	str	r3, [sp, #16]
 80063be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c2:	2206      	movs	r2, #6
 80063c4:	4826      	ldr	r0, [pc, #152]	; (8006460 <_svfiprintf_r+0x1f4>)
 80063c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ca:	f000 f9e5 	bl	8006798 <memchr>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d038      	beq.n	8006444 <_svfiprintf_r+0x1d8>
 80063d2:	4b24      	ldr	r3, [pc, #144]	; (8006464 <_svfiprintf_r+0x1f8>)
 80063d4:	bb1b      	cbnz	r3, 800641e <_svfiprintf_r+0x1b2>
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	3307      	adds	r3, #7
 80063da:	f023 0307 	bic.w	r3, r3, #7
 80063de:	3308      	adds	r3, #8
 80063e0:	9303      	str	r3, [sp, #12]
 80063e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e4:	4433      	add	r3, r6
 80063e6:	9309      	str	r3, [sp, #36]	; 0x24
 80063e8:	e767      	b.n	80062ba <_svfiprintf_r+0x4e>
 80063ea:	460c      	mov	r4, r1
 80063ec:	2001      	movs	r0, #1
 80063ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80063f2:	e7a5      	b.n	8006340 <_svfiprintf_r+0xd4>
 80063f4:	2300      	movs	r3, #0
 80063f6:	f04f 0c0a 	mov.w	ip, #10
 80063fa:	4619      	mov	r1, r3
 80063fc:	3401      	adds	r4, #1
 80063fe:	9305      	str	r3, [sp, #20]
 8006400:	4620      	mov	r0, r4
 8006402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006406:	3a30      	subs	r2, #48	; 0x30
 8006408:	2a09      	cmp	r2, #9
 800640a:	d903      	bls.n	8006414 <_svfiprintf_r+0x1a8>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0c5      	beq.n	800639c <_svfiprintf_r+0x130>
 8006410:	9105      	str	r1, [sp, #20]
 8006412:	e7c3      	b.n	800639c <_svfiprintf_r+0x130>
 8006414:	4604      	mov	r4, r0
 8006416:	2301      	movs	r3, #1
 8006418:	fb0c 2101 	mla	r1, ip, r1, r2
 800641c:	e7f0      	b.n	8006400 <_svfiprintf_r+0x194>
 800641e:	ab03      	add	r3, sp, #12
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	462a      	mov	r2, r5
 8006424:	4638      	mov	r0, r7
 8006426:	4b10      	ldr	r3, [pc, #64]	; (8006468 <_svfiprintf_r+0x1fc>)
 8006428:	a904      	add	r1, sp, #16
 800642a:	f3af 8000 	nop.w
 800642e:	1c42      	adds	r2, r0, #1
 8006430:	4606      	mov	r6, r0
 8006432:	d1d6      	bne.n	80063e2 <_svfiprintf_r+0x176>
 8006434:	89ab      	ldrh	r3, [r5, #12]
 8006436:	065b      	lsls	r3, r3, #25
 8006438:	f53f af2c 	bmi.w	8006294 <_svfiprintf_r+0x28>
 800643c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800643e:	b01d      	add	sp, #116	; 0x74
 8006440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006444:	ab03      	add	r3, sp, #12
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	462a      	mov	r2, r5
 800644a:	4638      	mov	r0, r7
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <_svfiprintf_r+0x1fc>)
 800644e:	a904      	add	r1, sp, #16
 8006450:	f000 f87c 	bl	800654c <_printf_i>
 8006454:	e7eb      	b.n	800642e <_svfiprintf_r+0x1c2>
 8006456:	bf00      	nop
 8006458:	08006b88 	.word	0x08006b88
 800645c:	08006b8e 	.word	0x08006b8e
 8006460:	08006b92 	.word	0x08006b92
 8006464:	00000000 	.word	0x00000000
 8006468:	080061b5 	.word	0x080061b5

0800646c <_printf_common>:
 800646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	4616      	mov	r6, r2
 8006472:	4699      	mov	r9, r3
 8006474:	688a      	ldr	r2, [r1, #8]
 8006476:	690b      	ldr	r3, [r1, #16]
 8006478:	4607      	mov	r7, r0
 800647a:	4293      	cmp	r3, r2
 800647c:	bfb8      	it	lt
 800647e:	4613      	movlt	r3, r2
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006486:	460c      	mov	r4, r1
 8006488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800648c:	b10a      	cbz	r2, 8006492 <_printf_common+0x26>
 800648e:	3301      	adds	r3, #1
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	0699      	lsls	r1, r3, #26
 8006496:	bf42      	ittt	mi
 8006498:	6833      	ldrmi	r3, [r6, #0]
 800649a:	3302      	addmi	r3, #2
 800649c:	6033      	strmi	r3, [r6, #0]
 800649e:	6825      	ldr	r5, [r4, #0]
 80064a0:	f015 0506 	ands.w	r5, r5, #6
 80064a4:	d106      	bne.n	80064b4 <_printf_common+0x48>
 80064a6:	f104 0a19 	add.w	sl, r4, #25
 80064aa:	68e3      	ldr	r3, [r4, #12]
 80064ac:	6832      	ldr	r2, [r6, #0]
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	42ab      	cmp	r3, r5
 80064b2:	dc28      	bgt.n	8006506 <_printf_common+0x9a>
 80064b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064b8:	1e13      	subs	r3, r2, #0
 80064ba:	6822      	ldr	r2, [r4, #0]
 80064bc:	bf18      	it	ne
 80064be:	2301      	movne	r3, #1
 80064c0:	0692      	lsls	r2, r2, #26
 80064c2:	d42d      	bmi.n	8006520 <_printf_common+0xb4>
 80064c4:	4649      	mov	r1, r9
 80064c6:	4638      	mov	r0, r7
 80064c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064cc:	47c0      	blx	r8
 80064ce:	3001      	adds	r0, #1
 80064d0:	d020      	beq.n	8006514 <_printf_common+0xa8>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	68e5      	ldr	r5, [r4, #12]
 80064d6:	f003 0306 	and.w	r3, r3, #6
 80064da:	2b04      	cmp	r3, #4
 80064dc:	bf18      	it	ne
 80064de:	2500      	movne	r5, #0
 80064e0:	6832      	ldr	r2, [r6, #0]
 80064e2:	f04f 0600 	mov.w	r6, #0
 80064e6:	68a3      	ldr	r3, [r4, #8]
 80064e8:	bf08      	it	eq
 80064ea:	1aad      	subeq	r5, r5, r2
 80064ec:	6922      	ldr	r2, [r4, #16]
 80064ee:	bf08      	it	eq
 80064f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064f4:	4293      	cmp	r3, r2
 80064f6:	bfc4      	itt	gt
 80064f8:	1a9b      	subgt	r3, r3, r2
 80064fa:	18ed      	addgt	r5, r5, r3
 80064fc:	341a      	adds	r4, #26
 80064fe:	42b5      	cmp	r5, r6
 8006500:	d11a      	bne.n	8006538 <_printf_common+0xcc>
 8006502:	2000      	movs	r0, #0
 8006504:	e008      	b.n	8006518 <_printf_common+0xac>
 8006506:	2301      	movs	r3, #1
 8006508:	4652      	mov	r2, sl
 800650a:	4649      	mov	r1, r9
 800650c:	4638      	mov	r0, r7
 800650e:	47c0      	blx	r8
 8006510:	3001      	adds	r0, #1
 8006512:	d103      	bne.n	800651c <_printf_common+0xb0>
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651c:	3501      	adds	r5, #1
 800651e:	e7c4      	b.n	80064aa <_printf_common+0x3e>
 8006520:	2030      	movs	r0, #48	; 0x30
 8006522:	18e1      	adds	r1, r4, r3
 8006524:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800652e:	4422      	add	r2, r4
 8006530:	3302      	adds	r3, #2
 8006532:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006536:	e7c5      	b.n	80064c4 <_printf_common+0x58>
 8006538:	2301      	movs	r3, #1
 800653a:	4622      	mov	r2, r4
 800653c:	4649      	mov	r1, r9
 800653e:	4638      	mov	r0, r7
 8006540:	47c0      	blx	r8
 8006542:	3001      	adds	r0, #1
 8006544:	d0e6      	beq.n	8006514 <_printf_common+0xa8>
 8006546:	3601      	adds	r6, #1
 8006548:	e7d9      	b.n	80064fe <_printf_common+0x92>
	...

0800654c <_printf_i>:
 800654c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006550:	7e0f      	ldrb	r7, [r1, #24]
 8006552:	4691      	mov	r9, r2
 8006554:	2f78      	cmp	r7, #120	; 0x78
 8006556:	4680      	mov	r8, r0
 8006558:	460c      	mov	r4, r1
 800655a:	469a      	mov	sl, r3
 800655c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800655e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006562:	d807      	bhi.n	8006574 <_printf_i+0x28>
 8006564:	2f62      	cmp	r7, #98	; 0x62
 8006566:	d80a      	bhi.n	800657e <_printf_i+0x32>
 8006568:	2f00      	cmp	r7, #0
 800656a:	f000 80d9 	beq.w	8006720 <_printf_i+0x1d4>
 800656e:	2f58      	cmp	r7, #88	; 0x58
 8006570:	f000 80a4 	beq.w	80066bc <_printf_i+0x170>
 8006574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800657c:	e03a      	b.n	80065f4 <_printf_i+0xa8>
 800657e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006582:	2b15      	cmp	r3, #21
 8006584:	d8f6      	bhi.n	8006574 <_printf_i+0x28>
 8006586:	a101      	add	r1, pc, #4	; (adr r1, 800658c <_printf_i+0x40>)
 8006588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800658c:	080065e5 	.word	0x080065e5
 8006590:	080065f9 	.word	0x080065f9
 8006594:	08006575 	.word	0x08006575
 8006598:	08006575 	.word	0x08006575
 800659c:	08006575 	.word	0x08006575
 80065a0:	08006575 	.word	0x08006575
 80065a4:	080065f9 	.word	0x080065f9
 80065a8:	08006575 	.word	0x08006575
 80065ac:	08006575 	.word	0x08006575
 80065b0:	08006575 	.word	0x08006575
 80065b4:	08006575 	.word	0x08006575
 80065b8:	08006707 	.word	0x08006707
 80065bc:	08006629 	.word	0x08006629
 80065c0:	080066e9 	.word	0x080066e9
 80065c4:	08006575 	.word	0x08006575
 80065c8:	08006575 	.word	0x08006575
 80065cc:	08006729 	.word	0x08006729
 80065d0:	08006575 	.word	0x08006575
 80065d4:	08006629 	.word	0x08006629
 80065d8:	08006575 	.word	0x08006575
 80065dc:	08006575 	.word	0x08006575
 80065e0:	080066f1 	.word	0x080066f1
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	1d1a      	adds	r2, r3, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	602a      	str	r2, [r5, #0]
 80065ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0a4      	b.n	8006742 <_printf_i+0x1f6>
 80065f8:	6820      	ldr	r0, [r4, #0]
 80065fa:	6829      	ldr	r1, [r5, #0]
 80065fc:	0606      	lsls	r6, r0, #24
 80065fe:	f101 0304 	add.w	r3, r1, #4
 8006602:	d50a      	bpl.n	800661a <_printf_i+0xce>
 8006604:	680e      	ldr	r6, [r1, #0]
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	2e00      	cmp	r6, #0
 800660a:	da03      	bge.n	8006614 <_printf_i+0xc8>
 800660c:	232d      	movs	r3, #45	; 0x2d
 800660e:	4276      	negs	r6, r6
 8006610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006614:	230a      	movs	r3, #10
 8006616:	485e      	ldr	r0, [pc, #376]	; (8006790 <_printf_i+0x244>)
 8006618:	e019      	b.n	800664e <_printf_i+0x102>
 800661a:	680e      	ldr	r6, [r1, #0]
 800661c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	bf18      	it	ne
 8006624:	b236      	sxthne	r6, r6
 8006626:	e7ef      	b.n	8006608 <_printf_i+0xbc>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	6820      	ldr	r0, [r4, #0]
 800662c:	1d19      	adds	r1, r3, #4
 800662e:	6029      	str	r1, [r5, #0]
 8006630:	0601      	lsls	r1, r0, #24
 8006632:	d501      	bpl.n	8006638 <_printf_i+0xec>
 8006634:	681e      	ldr	r6, [r3, #0]
 8006636:	e002      	b.n	800663e <_printf_i+0xf2>
 8006638:	0646      	lsls	r6, r0, #25
 800663a:	d5fb      	bpl.n	8006634 <_printf_i+0xe8>
 800663c:	881e      	ldrh	r6, [r3, #0]
 800663e:	2f6f      	cmp	r7, #111	; 0x6f
 8006640:	bf0c      	ite	eq
 8006642:	2308      	moveq	r3, #8
 8006644:	230a      	movne	r3, #10
 8006646:	4852      	ldr	r0, [pc, #328]	; (8006790 <_printf_i+0x244>)
 8006648:	2100      	movs	r1, #0
 800664a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800664e:	6865      	ldr	r5, [r4, #4]
 8006650:	2d00      	cmp	r5, #0
 8006652:	bfa8      	it	ge
 8006654:	6821      	ldrge	r1, [r4, #0]
 8006656:	60a5      	str	r5, [r4, #8]
 8006658:	bfa4      	itt	ge
 800665a:	f021 0104 	bicge.w	r1, r1, #4
 800665e:	6021      	strge	r1, [r4, #0]
 8006660:	b90e      	cbnz	r6, 8006666 <_printf_i+0x11a>
 8006662:	2d00      	cmp	r5, #0
 8006664:	d04d      	beq.n	8006702 <_printf_i+0x1b6>
 8006666:	4615      	mov	r5, r2
 8006668:	fbb6 f1f3 	udiv	r1, r6, r3
 800666c:	fb03 6711 	mls	r7, r3, r1, r6
 8006670:	5dc7      	ldrb	r7, [r0, r7]
 8006672:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006676:	4637      	mov	r7, r6
 8006678:	42bb      	cmp	r3, r7
 800667a:	460e      	mov	r6, r1
 800667c:	d9f4      	bls.n	8006668 <_printf_i+0x11c>
 800667e:	2b08      	cmp	r3, #8
 8006680:	d10b      	bne.n	800669a <_printf_i+0x14e>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	07de      	lsls	r6, r3, #31
 8006686:	d508      	bpl.n	800669a <_printf_i+0x14e>
 8006688:	6923      	ldr	r3, [r4, #16]
 800668a:	6861      	ldr	r1, [r4, #4]
 800668c:	4299      	cmp	r1, r3
 800668e:	bfde      	ittt	le
 8006690:	2330      	movle	r3, #48	; 0x30
 8006692:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006696:	f105 35ff 	addle.w	r5, r5, #4294967295
 800669a:	1b52      	subs	r2, r2, r5
 800669c:	6122      	str	r2, [r4, #16]
 800669e:	464b      	mov	r3, r9
 80066a0:	4621      	mov	r1, r4
 80066a2:	4640      	mov	r0, r8
 80066a4:	f8cd a000 	str.w	sl, [sp]
 80066a8:	aa03      	add	r2, sp, #12
 80066aa:	f7ff fedf 	bl	800646c <_printf_common>
 80066ae:	3001      	adds	r0, #1
 80066b0:	d14c      	bne.n	800674c <_printf_i+0x200>
 80066b2:	f04f 30ff 	mov.w	r0, #4294967295
 80066b6:	b004      	add	sp, #16
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	4834      	ldr	r0, [pc, #208]	; (8006790 <_printf_i+0x244>)
 80066be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066c2:	6829      	ldr	r1, [r5, #0]
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80066ca:	6029      	str	r1, [r5, #0]
 80066cc:	061d      	lsls	r5, r3, #24
 80066ce:	d514      	bpl.n	80066fa <_printf_i+0x1ae>
 80066d0:	07df      	lsls	r7, r3, #31
 80066d2:	bf44      	itt	mi
 80066d4:	f043 0320 	orrmi.w	r3, r3, #32
 80066d8:	6023      	strmi	r3, [r4, #0]
 80066da:	b91e      	cbnz	r6, 80066e4 <_printf_i+0x198>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	f023 0320 	bic.w	r3, r3, #32
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	2310      	movs	r3, #16
 80066e6:	e7af      	b.n	8006648 <_printf_i+0xfc>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	f043 0320 	orr.w	r3, r3, #32
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	2378      	movs	r3, #120	; 0x78
 80066f2:	4828      	ldr	r0, [pc, #160]	; (8006794 <_printf_i+0x248>)
 80066f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066f8:	e7e3      	b.n	80066c2 <_printf_i+0x176>
 80066fa:	0659      	lsls	r1, r3, #25
 80066fc:	bf48      	it	mi
 80066fe:	b2b6      	uxthmi	r6, r6
 8006700:	e7e6      	b.n	80066d0 <_printf_i+0x184>
 8006702:	4615      	mov	r5, r2
 8006704:	e7bb      	b.n	800667e <_printf_i+0x132>
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	6826      	ldr	r6, [r4, #0]
 800670a:	1d18      	adds	r0, r3, #4
 800670c:	6961      	ldr	r1, [r4, #20]
 800670e:	6028      	str	r0, [r5, #0]
 8006710:	0635      	lsls	r5, r6, #24
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	d501      	bpl.n	800671a <_printf_i+0x1ce>
 8006716:	6019      	str	r1, [r3, #0]
 8006718:	e002      	b.n	8006720 <_printf_i+0x1d4>
 800671a:	0670      	lsls	r0, r6, #25
 800671c:	d5fb      	bpl.n	8006716 <_printf_i+0x1ca>
 800671e:	8019      	strh	r1, [r3, #0]
 8006720:	2300      	movs	r3, #0
 8006722:	4615      	mov	r5, r2
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	e7ba      	b.n	800669e <_printf_i+0x152>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	2100      	movs	r1, #0
 800672c:	1d1a      	adds	r2, r3, #4
 800672e:	602a      	str	r2, [r5, #0]
 8006730:	681d      	ldr	r5, [r3, #0]
 8006732:	6862      	ldr	r2, [r4, #4]
 8006734:	4628      	mov	r0, r5
 8006736:	f000 f82f 	bl	8006798 <memchr>
 800673a:	b108      	cbz	r0, 8006740 <_printf_i+0x1f4>
 800673c:	1b40      	subs	r0, r0, r5
 800673e:	6060      	str	r0, [r4, #4]
 8006740:	6863      	ldr	r3, [r4, #4]
 8006742:	6123      	str	r3, [r4, #16]
 8006744:	2300      	movs	r3, #0
 8006746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800674a:	e7a8      	b.n	800669e <_printf_i+0x152>
 800674c:	462a      	mov	r2, r5
 800674e:	4649      	mov	r1, r9
 8006750:	4640      	mov	r0, r8
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	47d0      	blx	sl
 8006756:	3001      	adds	r0, #1
 8006758:	d0ab      	beq.n	80066b2 <_printf_i+0x166>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	079b      	lsls	r3, r3, #30
 800675e:	d413      	bmi.n	8006788 <_printf_i+0x23c>
 8006760:	68e0      	ldr	r0, [r4, #12]
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	4298      	cmp	r0, r3
 8006766:	bfb8      	it	lt
 8006768:	4618      	movlt	r0, r3
 800676a:	e7a4      	b.n	80066b6 <_printf_i+0x16a>
 800676c:	2301      	movs	r3, #1
 800676e:	4632      	mov	r2, r6
 8006770:	4649      	mov	r1, r9
 8006772:	4640      	mov	r0, r8
 8006774:	47d0      	blx	sl
 8006776:	3001      	adds	r0, #1
 8006778:	d09b      	beq.n	80066b2 <_printf_i+0x166>
 800677a:	3501      	adds	r5, #1
 800677c:	68e3      	ldr	r3, [r4, #12]
 800677e:	9903      	ldr	r1, [sp, #12]
 8006780:	1a5b      	subs	r3, r3, r1
 8006782:	42ab      	cmp	r3, r5
 8006784:	dcf2      	bgt.n	800676c <_printf_i+0x220>
 8006786:	e7eb      	b.n	8006760 <_printf_i+0x214>
 8006788:	2500      	movs	r5, #0
 800678a:	f104 0619 	add.w	r6, r4, #25
 800678e:	e7f5      	b.n	800677c <_printf_i+0x230>
 8006790:	08006b99 	.word	0x08006b99
 8006794:	08006baa 	.word	0x08006baa

08006798 <memchr>:
 8006798:	4603      	mov	r3, r0
 800679a:	b510      	push	{r4, lr}
 800679c:	b2c9      	uxtb	r1, r1
 800679e:	4402      	add	r2, r0
 80067a0:	4293      	cmp	r3, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	d101      	bne.n	80067aa <memchr+0x12>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e003      	b.n	80067b2 <memchr+0x1a>
 80067aa:	7804      	ldrb	r4, [r0, #0]
 80067ac:	3301      	adds	r3, #1
 80067ae:	428c      	cmp	r4, r1
 80067b0:	d1f6      	bne.n	80067a0 <memchr+0x8>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <memcpy>:
 80067b4:	440a      	add	r2, r1
 80067b6:	4291      	cmp	r1, r2
 80067b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80067bc:	d100      	bne.n	80067c0 <memcpy+0xc>
 80067be:	4770      	bx	lr
 80067c0:	b510      	push	{r4, lr}
 80067c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c6:	4291      	cmp	r1, r2
 80067c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067cc:	d1f9      	bne.n	80067c2 <memcpy+0xe>
 80067ce:	bd10      	pop	{r4, pc}

080067d0 <memmove>:
 80067d0:	4288      	cmp	r0, r1
 80067d2:	b510      	push	{r4, lr}
 80067d4:	eb01 0402 	add.w	r4, r1, r2
 80067d8:	d902      	bls.n	80067e0 <memmove+0x10>
 80067da:	4284      	cmp	r4, r0
 80067dc:	4623      	mov	r3, r4
 80067de:	d807      	bhi.n	80067f0 <memmove+0x20>
 80067e0:	1e43      	subs	r3, r0, #1
 80067e2:	42a1      	cmp	r1, r4
 80067e4:	d008      	beq.n	80067f8 <memmove+0x28>
 80067e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ee:	e7f8      	b.n	80067e2 <memmove+0x12>
 80067f0:	4601      	mov	r1, r0
 80067f2:	4402      	add	r2, r0
 80067f4:	428a      	cmp	r2, r1
 80067f6:	d100      	bne.n	80067fa <memmove+0x2a>
 80067f8:	bd10      	pop	{r4, pc}
 80067fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006802:	e7f7      	b.n	80067f4 <memmove+0x24>

08006804 <_free_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4605      	mov	r5, r0
 8006808:	2900      	cmp	r1, #0
 800680a:	d040      	beq.n	800688e <_free_r+0x8a>
 800680c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006810:	1f0c      	subs	r4, r1, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	bfb8      	it	lt
 8006816:	18e4      	addlt	r4, r4, r3
 8006818:	f000 f910 	bl	8006a3c <__malloc_lock>
 800681c:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <_free_r+0x8c>)
 800681e:	6813      	ldr	r3, [r2, #0]
 8006820:	b933      	cbnz	r3, 8006830 <_free_r+0x2c>
 8006822:	6063      	str	r3, [r4, #4]
 8006824:	6014      	str	r4, [r2, #0]
 8006826:	4628      	mov	r0, r5
 8006828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800682c:	f000 b90c 	b.w	8006a48 <__malloc_unlock>
 8006830:	42a3      	cmp	r3, r4
 8006832:	d908      	bls.n	8006846 <_free_r+0x42>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	1821      	adds	r1, r4, r0
 8006838:	428b      	cmp	r3, r1
 800683a:	bf01      	itttt	eq
 800683c:	6819      	ldreq	r1, [r3, #0]
 800683e:	685b      	ldreq	r3, [r3, #4]
 8006840:	1809      	addeq	r1, r1, r0
 8006842:	6021      	streq	r1, [r4, #0]
 8006844:	e7ed      	b.n	8006822 <_free_r+0x1e>
 8006846:	461a      	mov	r2, r3
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	b10b      	cbz	r3, 8006850 <_free_r+0x4c>
 800684c:	42a3      	cmp	r3, r4
 800684e:	d9fa      	bls.n	8006846 <_free_r+0x42>
 8006850:	6811      	ldr	r1, [r2, #0]
 8006852:	1850      	adds	r0, r2, r1
 8006854:	42a0      	cmp	r0, r4
 8006856:	d10b      	bne.n	8006870 <_free_r+0x6c>
 8006858:	6820      	ldr	r0, [r4, #0]
 800685a:	4401      	add	r1, r0
 800685c:	1850      	adds	r0, r2, r1
 800685e:	4283      	cmp	r3, r0
 8006860:	6011      	str	r1, [r2, #0]
 8006862:	d1e0      	bne.n	8006826 <_free_r+0x22>
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4401      	add	r1, r0
 800686a:	6011      	str	r1, [r2, #0]
 800686c:	6053      	str	r3, [r2, #4]
 800686e:	e7da      	b.n	8006826 <_free_r+0x22>
 8006870:	d902      	bls.n	8006878 <_free_r+0x74>
 8006872:	230c      	movs	r3, #12
 8006874:	602b      	str	r3, [r5, #0]
 8006876:	e7d6      	b.n	8006826 <_free_r+0x22>
 8006878:	6820      	ldr	r0, [r4, #0]
 800687a:	1821      	adds	r1, r4, r0
 800687c:	428b      	cmp	r3, r1
 800687e:	bf01      	itttt	eq
 8006880:	6819      	ldreq	r1, [r3, #0]
 8006882:	685b      	ldreq	r3, [r3, #4]
 8006884:	1809      	addeq	r1, r1, r0
 8006886:	6021      	streq	r1, [r4, #0]
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	6054      	str	r4, [r2, #4]
 800688c:	e7cb      	b.n	8006826 <_free_r+0x22>
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	20001104 	.word	0x20001104

08006894 <sbrk_aligned>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	4e0e      	ldr	r6, [pc, #56]	; (80068d0 <sbrk_aligned+0x3c>)
 8006898:	460c      	mov	r4, r1
 800689a:	6831      	ldr	r1, [r6, #0]
 800689c:	4605      	mov	r5, r0
 800689e:	b911      	cbnz	r1, 80068a6 <sbrk_aligned+0x12>
 80068a0:	f000 f8bc 	bl	8006a1c <_sbrk_r>
 80068a4:	6030      	str	r0, [r6, #0]
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 f8b7 	bl	8006a1c <_sbrk_r>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	d00a      	beq.n	80068c8 <sbrk_aligned+0x34>
 80068b2:	1cc4      	adds	r4, r0, #3
 80068b4:	f024 0403 	bic.w	r4, r4, #3
 80068b8:	42a0      	cmp	r0, r4
 80068ba:	d007      	beq.n	80068cc <sbrk_aligned+0x38>
 80068bc:	1a21      	subs	r1, r4, r0
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f8ac 	bl	8006a1c <_sbrk_r>
 80068c4:	3001      	adds	r0, #1
 80068c6:	d101      	bne.n	80068cc <sbrk_aligned+0x38>
 80068c8:	f04f 34ff 	mov.w	r4, #4294967295
 80068cc:	4620      	mov	r0, r4
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	20001108 	.word	0x20001108

080068d4 <_malloc_r>:
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	1ccd      	adds	r5, r1, #3
 80068da:	f025 0503 	bic.w	r5, r5, #3
 80068de:	3508      	adds	r5, #8
 80068e0:	2d0c      	cmp	r5, #12
 80068e2:	bf38      	it	cc
 80068e4:	250c      	movcc	r5, #12
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	4607      	mov	r7, r0
 80068ea:	db01      	blt.n	80068f0 <_malloc_r+0x1c>
 80068ec:	42a9      	cmp	r1, r5
 80068ee:	d905      	bls.n	80068fc <_malloc_r+0x28>
 80068f0:	230c      	movs	r3, #12
 80068f2:	2600      	movs	r6, #0
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	4630      	mov	r0, r6
 80068f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068fc:	4e2e      	ldr	r6, [pc, #184]	; (80069b8 <_malloc_r+0xe4>)
 80068fe:	f000 f89d 	bl	8006a3c <__malloc_lock>
 8006902:	6833      	ldr	r3, [r6, #0]
 8006904:	461c      	mov	r4, r3
 8006906:	bb34      	cbnz	r4, 8006956 <_malloc_r+0x82>
 8006908:	4629      	mov	r1, r5
 800690a:	4638      	mov	r0, r7
 800690c:	f7ff ffc2 	bl	8006894 <sbrk_aligned>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	4604      	mov	r4, r0
 8006914:	d14d      	bne.n	80069b2 <_malloc_r+0xde>
 8006916:	6834      	ldr	r4, [r6, #0]
 8006918:	4626      	mov	r6, r4
 800691a:	2e00      	cmp	r6, #0
 800691c:	d140      	bne.n	80069a0 <_malloc_r+0xcc>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	4631      	mov	r1, r6
 8006922:	4638      	mov	r0, r7
 8006924:	eb04 0803 	add.w	r8, r4, r3
 8006928:	f000 f878 	bl	8006a1c <_sbrk_r>
 800692c:	4580      	cmp	r8, r0
 800692e:	d13a      	bne.n	80069a6 <_malloc_r+0xd2>
 8006930:	6821      	ldr	r1, [r4, #0]
 8006932:	3503      	adds	r5, #3
 8006934:	1a6d      	subs	r5, r5, r1
 8006936:	f025 0503 	bic.w	r5, r5, #3
 800693a:	3508      	adds	r5, #8
 800693c:	2d0c      	cmp	r5, #12
 800693e:	bf38      	it	cc
 8006940:	250c      	movcc	r5, #12
 8006942:	4638      	mov	r0, r7
 8006944:	4629      	mov	r1, r5
 8006946:	f7ff ffa5 	bl	8006894 <sbrk_aligned>
 800694a:	3001      	adds	r0, #1
 800694c:	d02b      	beq.n	80069a6 <_malloc_r+0xd2>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	442b      	add	r3, r5
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	e00e      	b.n	8006974 <_malloc_r+0xa0>
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	1b52      	subs	r2, r2, r5
 800695a:	d41e      	bmi.n	800699a <_malloc_r+0xc6>
 800695c:	2a0b      	cmp	r2, #11
 800695e:	d916      	bls.n	800698e <_malloc_r+0xba>
 8006960:	1961      	adds	r1, r4, r5
 8006962:	42a3      	cmp	r3, r4
 8006964:	6025      	str	r5, [r4, #0]
 8006966:	bf18      	it	ne
 8006968:	6059      	strne	r1, [r3, #4]
 800696a:	6863      	ldr	r3, [r4, #4]
 800696c:	bf08      	it	eq
 800696e:	6031      	streq	r1, [r6, #0]
 8006970:	5162      	str	r2, [r4, r5]
 8006972:	604b      	str	r3, [r1, #4]
 8006974:	4638      	mov	r0, r7
 8006976:	f104 060b 	add.w	r6, r4, #11
 800697a:	f000 f865 	bl	8006a48 <__malloc_unlock>
 800697e:	f026 0607 	bic.w	r6, r6, #7
 8006982:	1d23      	adds	r3, r4, #4
 8006984:	1af2      	subs	r2, r6, r3
 8006986:	d0b6      	beq.n	80068f6 <_malloc_r+0x22>
 8006988:	1b9b      	subs	r3, r3, r6
 800698a:	50a3      	str	r3, [r4, r2]
 800698c:	e7b3      	b.n	80068f6 <_malloc_r+0x22>
 800698e:	6862      	ldr	r2, [r4, #4]
 8006990:	42a3      	cmp	r3, r4
 8006992:	bf0c      	ite	eq
 8006994:	6032      	streq	r2, [r6, #0]
 8006996:	605a      	strne	r2, [r3, #4]
 8006998:	e7ec      	b.n	8006974 <_malloc_r+0xa0>
 800699a:	4623      	mov	r3, r4
 800699c:	6864      	ldr	r4, [r4, #4]
 800699e:	e7b2      	b.n	8006906 <_malloc_r+0x32>
 80069a0:	4634      	mov	r4, r6
 80069a2:	6876      	ldr	r6, [r6, #4]
 80069a4:	e7b9      	b.n	800691a <_malloc_r+0x46>
 80069a6:	230c      	movs	r3, #12
 80069a8:	4638      	mov	r0, r7
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	f000 f84c 	bl	8006a48 <__malloc_unlock>
 80069b0:	e7a1      	b.n	80068f6 <_malloc_r+0x22>
 80069b2:	6025      	str	r5, [r4, #0]
 80069b4:	e7de      	b.n	8006974 <_malloc_r+0xa0>
 80069b6:	bf00      	nop
 80069b8:	20001104 	.word	0x20001104

080069bc <_realloc_r>:
 80069bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c0:	4680      	mov	r8, r0
 80069c2:	4614      	mov	r4, r2
 80069c4:	460e      	mov	r6, r1
 80069c6:	b921      	cbnz	r1, 80069d2 <_realloc_r+0x16>
 80069c8:	4611      	mov	r1, r2
 80069ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ce:	f7ff bf81 	b.w	80068d4 <_malloc_r>
 80069d2:	b92a      	cbnz	r2, 80069e0 <_realloc_r+0x24>
 80069d4:	f7ff ff16 	bl	8006804 <_free_r>
 80069d8:	4625      	mov	r5, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	f000 f838 	bl	8006a54 <_malloc_usable_size_r>
 80069e4:	4284      	cmp	r4, r0
 80069e6:	4607      	mov	r7, r0
 80069e8:	d802      	bhi.n	80069f0 <_realloc_r+0x34>
 80069ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069ee:	d812      	bhi.n	8006a16 <_realloc_r+0x5a>
 80069f0:	4621      	mov	r1, r4
 80069f2:	4640      	mov	r0, r8
 80069f4:	f7ff ff6e 	bl	80068d4 <_malloc_r>
 80069f8:	4605      	mov	r5, r0
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d0ed      	beq.n	80069da <_realloc_r+0x1e>
 80069fe:	42bc      	cmp	r4, r7
 8006a00:	4622      	mov	r2, r4
 8006a02:	4631      	mov	r1, r6
 8006a04:	bf28      	it	cs
 8006a06:	463a      	movcs	r2, r7
 8006a08:	f7ff fed4 	bl	80067b4 <memcpy>
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4640      	mov	r0, r8
 8006a10:	f7ff fef8 	bl	8006804 <_free_r>
 8006a14:	e7e1      	b.n	80069da <_realloc_r+0x1e>
 8006a16:	4635      	mov	r5, r6
 8006a18:	e7df      	b.n	80069da <_realloc_r+0x1e>
	...

08006a1c <_sbrk_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4d05      	ldr	r5, [pc, #20]	; (8006a38 <_sbrk_r+0x1c>)
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fb febe 	bl	80027a8 <_sbrk>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_sbrk_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_sbrk_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	2000110c 	.word	0x2000110c

08006a3c <__malloc_lock>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	; (8006a44 <__malloc_lock+0x8>)
 8006a3e:	f000 b811 	b.w	8006a64 <__retarget_lock_acquire_recursive>
 8006a42:	bf00      	nop
 8006a44:	20001110 	.word	0x20001110

08006a48 <__malloc_unlock>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__malloc_unlock+0x8>)
 8006a4a:	f000 b80c 	b.w	8006a66 <__retarget_lock_release_recursive>
 8006a4e:	bf00      	nop
 8006a50:	20001110 	.word	0x20001110

08006a54 <_malloc_usable_size_r>:
 8006a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a58:	1f18      	subs	r0, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bfbc      	itt	lt
 8006a5e:	580b      	ldrlt	r3, [r1, r0]
 8006a60:	18c0      	addlt	r0, r0, r3
 8006a62:	4770      	bx	lr

08006a64 <__retarget_lock_acquire_recursive>:
 8006a64:	4770      	bx	lr

08006a66 <__retarget_lock_release_recursive>:
 8006a66:	4770      	bx	lr

08006a68 <_init>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr

08006a74 <_fini>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr
